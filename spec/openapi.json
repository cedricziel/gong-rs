{
    "openapi": "3.0.1",
    "info": {
        "title": "Gong API",
        "description": "<h2>Overview</h2>\n<p>\nThe Gong API allows you to:\n</p>\n<ol>\n<li>\nReceive the following information from Gong:\n<ol type=\"a\">\n<li>\nYour company's <a href=\"#tag--Calls\">calls</a> in Gong\n</li>\n<li>\nYour company's <a href=\"#tag--Users\">users</a> in Gong\n</li>\n<li>\nYour company's user <a href=\"#tag--Stats\">stats</a> in Gong\n</li>\n<li>\nYour company's user <a href=\"#tag--Settings\">settings</a> in Gong\n</li>\n<li>\nYour company's <a href=\"#tag--Library\">libraries</a> in Gong\n</li>\n</ol></li>\n<li>\n<a href=\"#post-/v2/calls\">Upload</a> new or \n<a href=\"#put-/v2/calls/-id-/media\">update</a> \ncall recordings in Gong, in order to support cases where you have an internal system that records \ncalls or obtains them from a third-party entity.\n</li>\n<li>\n<a href=\"#post-/v2/data-privacy/erase-data-for-email-address\">Data Privacy</a>: \nDelete users and all their associated elements.</li>\n<li>\nUpload <a href=\"#tag--CRM\">CRM</a> data into Gong. \n</li>\n</ol>\n<p>Check <a href=\"https://app.gong.io/company/api-authentication?currentTab=MY_API_TAB\">here</a> what's your base URL for all API calls.\n</p>\n<h2>Authentication</h2>\n\n<p>\nThere are two ways to retrieve credentials to the Gong Public API:\n</p>\n<ol><li>Retrieve Manually:<br>\n<p>\nIn the <a href=\"https://app.gong.io/company/api\">Gong API Page</a> (you\nmust be a technical administrator in Gong), click \"Create\" to receive an <b>Access Key</b>\n and an <b>Access Key Secret</b>.<br>\n</p>\n<p>\nUse the Basic Authorization HTTP header (as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc7617.txt\">RFC</a>)\nto access the Public API as shown below:<br>\n<code>Authorization: Basic &lt;token&gt;</code><br>\n</p>\n<p>\nTo create the basic token, combine the <b>Access Key</b> and the <b>Access Key Secret</b> with \ncolon (:) and then encode in Base64 as following:<br>\n<code>Base64(&lt;accessKey&gt; : &lt;accessKeySecret&gt;)</code><br><br>\n</p></li>\n<li>Retrieve through OAuth<br>\n<p>\nTo obtain the Bearer token, follow the steps described in the <a target=\"_blank\" href=\"https://help.gong.io/hc/en-us/articles/13944551222157-Create-an-app-for-Gong\">Gong OAuth Guide</a>.\n<br></p>\n<p>\nAfter obtaining the token, use the Bearer Authorization HTTP header\n(as per <a target=\"_blank\" href=\"https://www.rfc-editor.org/rfc/rfc6750.txt\">RFC</a>)\nto access the Public API as shown below:<br>\n<code>Authorization: Bearer &lt;token&gt;</code>\n</p>\n</li></ol>\n<h2>Limits</h2>\n\n<p>\nBy default Gong limits your company's access to the service to 3 API calls per second, and 10,000 API calls per day.\n</p>\n<p>\nWhen the rate of API calls exceeds these limits an HTTP status code <b>429</b> is returned and a <b>Retry-After</b> header indicates\n how many seconds to wait before making a new request.\n</p><p>\nIf required, contact <a target=\"_blank\" href=\"https://help.gong.io\">help.gong.io</a> to change these limits.\n</p>\n\n<h2>Cursors</h2>\n\n<p>\nSome API calls that return a list are limited in the amount of records they may return, so multiple API calls may be\n required to bring all records. Such an API call also returns a <b>records</b> field, which contains the number of records\n in the current page, the current page number and the total number of records.\n</p>\n<p>\nIn cases where the total number of records exceeds the number of records thus far retrieved, the <b>records</b> field will also\n contain a <b>cursor</b> field which can be used to access the next page of records. To retrieve the next page, repeat the API call with\n the <b>cursor</b> value as supplied by the previous API call. All other request inputs should remain the same.\n</p>\n<h2>Forward Compatibility</h2>\n\n<p>\nWhen coding a system to accept Gong data, take into account that Gong may, without prior warning, add fields to the JSON output.\n It is recommended to future proof your code so that it disregards all JSON fields you don't actually use.\n\n</p><p></p>",
        "version": "V2"
    },
    "servers": [
        {
            "url": "https://127.0.0.1:8443",
            "description": "Generated server url"
        }
    ],
    "security": [
        {
            "BasicAuth": []
        }
    ],
    "tags": [
        {
            "name": "Calls",
            "description": "<h3>Gong’s “Calls” API endpoints allow you to:</h3>\n<ul>\n<li>\nRequest calls details from Gong\n</li>\n<li>\nUpload new calls to Gong\n</li>\n<li>\nUpdate Gong Calls with new media\n</li>\n</ul>\n<h3>The requested calls may contain the following call details:</h3>\n<ul>\n<li>\n<b>Meta Data</b> (Basic details such as call date, title, call URL, etc)\n</li>\n<li>\n<b>Parties</b> (A list of the call's participants)\n</li>\n<li>\n<b>Media</b> (The media urls of the call)\n</li>\n<li>\n<b>Content</b> (Analysis of the interaction content)\n<ul>\n<li>\nAction Items (A list of action items)\n</li>\n<li>\nStructure (A list of the agenda of each part of the call)\n</li>\n<li>\nTopics (A list of topics and their durations)\n</li>\n<li>\nTrackers (A list of trackers found in the call. Trackers are collections of phrases defined in Gong for this company)\n</li>\n<li>\nPhrases (A list of occurrence counters for each specific phrase within the tracker (e.g., Amazon, Walmart))\n</li>\n<li>\nContext (A list of links to external systems such as CRM, Dialer, Case Management, etc)\n</li>\n</ul>\n</li>\n<li>\n<b>Interaction</b> (Metrics collected around the interaction during the call)\n<ul>\n<li>\nInteraction Stats (A list of interaction statistics. Applicable values: 'Talk Ratio', 'Longest Monologue', \n'Longest Customer Story', 'Interactivity', 'Patience')\n</li>\n<li>\nQuestions (Question counts of the call)\n</li>\n<li>\nSpeakers (A list of the talk duration per speaker)\n</li>\n<li>\nVideo (A list of video statistics about what's presented and for how long)\n</li>\n</ul>\n</li>\n<li>\n<b>Collaboration</b> (Collaboration information added to the call)\n<ul>\n<li>\nPublic Comments (A list of public comments)\n</li>\n</ul>\n</li>\n<li>\n<b>Context</b> (A list of links to external systems such as CRM, Dialer, Case Management, etc)\n<ul>\n<li>\nObjects (List of objects within the external system)\n</li>\n<li>\nFields (Object fields)\n</li>\n</ul>\n</li>\n</ul>\n"
        },
        {
            "name": "Users",
            "description": "<h3>Gong’s “Users” API endpoints allow you to:</h3>\n<ul>\n<li>\nRequest a list of all the company's users with details\n</li>\n<li>\nRequest a specific user’s history from Gong\n</li>\n</ul>\n<h3>The requested users may contain the following details:</h3>\n<ul>\n<li>\nIf the Gong user is active or not.\n</li>\n<li>\nCreation time of the Gong user.\n</li>\n<li>\nThe email address of the Gong user.\n</li>\n<li>\nList of email address aliases of the Gong user.\n</li>\n<li>\nThe extension number of the Gong user.\n</li>\n<li>\nThe first name of the Gong user.\n</li>\n<li>\nThe last name of the Gong user.\n</li>\n<li>\nGong's unique numeric identifier for the user.\n</li>\n<li>\nThe manager ID of the Gong user.\n</li>\n<li>\nThe Gong recording consent meeting link.\n</li>\n<li>\nThe list of personal meeting URLs of the Gong user.\n</li>\n<li>\nThe phone number of the Gong user.\n</li>\n<li>\nThe job title of the Gong user.\n</li>\n<li>\nThe user's settings.\n<ul>\n<li>\nIf the team member is set to import emails by Gong.\n</li>\n<li>\nIf the team member is set to prevent import of emails by Gong.\n</li>\n<li>\nIf the invitation of this user to a web conference will prevent its recording (even if other users invited are set to record).\n</li>\n<li>\nIf the team member is set to import telephony calls by Gong.\n</li>\n<li>\nIf the team member is set to be recorded by Gong.\n</li>\n</ul>\n</li>\n<li>\nThe User's settings history.\n<ul>\n<li>\nThe user capability that was changed.\n</li>\n<li>\nThe date and time the action was set.\n</li>\n<li>\nThe new value that was set.\n</li>\n</ul>\n</li>\n</ul>\n"
        },
        {
            "name": "Stats",
            "description": "<h3>Gong’s “Stats” API endpoints allow you to:</h3>\n<ul>\n<li>\nRequest user activity\n</li>\n<li>\nRequest scorecards activity\n</li>\n<li>\nRequest interaction stats on calls that have Whisper turned on\n</li>\n</ul>\n<h3>The requested user activity may contain the following details:</h3>\n<ul>\n<li>\n<b>Calls Hosted:</b> The number of recorded calls this user hosted.\n</li>\n<li>\n<b>Call Participated:</b> The number of calls in which this user is a participant (not host).\n</li>\n<li>\n<b>Calls Reviewed:</b> The number of calls in which someone pressed the \"Mark as reviewed\".\n</li>\n<li>\n<b>Calls Listened:</b> The number of other users' calls the user listened to.\n</li>\n<li>\n<b>Call Shared Outside:</b> The number of calls the user shared with others outside the company.\n</li>\n<li>\n<b>Call Shared Inside:</b> The number of calls the user shared with others inside the company.\n</li>\n<li>\n<b>Own Calls Listened:</b> The number of the user's own calls the user listened to.\n</li>\n<li>\n<b>Comment Given:</b> The number of calls in which a user gave at least one comment.\n</li>\n<li>\n<b>Comment Received:</b> The number of calls in which a user received at least one comment on the users calls.\n</li>\n<li>\n<b>Feedback Given:</b> The number of recorded calls the user gave feedback on.\n</li>\n<li>\n<b>Feedback Received:</b> The number of recorded calls the user received feedback on.\n</li>\n<li>\n<b>Feedback Requested:</b> The number of recorded calls the user requested feedback on.\n</li>\n<li>\n<b>Scorecard Filled:</b> The number of calls in which someone filled a scorecard on the user's calls.\n</li>\n<li>\n<b>Scorecards Completed:</b> The number of scorecards the user completed.\n</li>\n<li>\n<b>Scorecards Answers:</b> The answers in the answered scorecard.\n</li>\n<li>\n<b>Whisper:</b> Person Interaction Stats (List of user interaction stats. Applicable values: 'Talk Ratio',\n 'Longest Monologue', 'Longest Customer Story', 'Interactivity', 'Question Rate', 'Patience').\n</li>\n</ul>\n"
        },
        {
            "name": "Settings",
            "description": "<h3>Gong’s “Settings” API endpoints allow you to:</h3>\n<ul>\n<li>\nRequest all the scorecards within the Gong system.\n</li>\n<li>\nRequest all the workspaces including their details.\n</li>\n</ul>\n"
        },
        {
            "name": "Data Privacy",
            "description": "<h3>Gong’s “Data Privacy” API endpoints allow you to:</h3>\n<ul>\n<li>\nRequest all references to an email address.\n</li>\n<li>\nRequest all references to a phone number.\n</li>\n<li>\nDelete the email address, and all associated elements.\n</li>\n<li>\nDelete the phone number, and all associated elements.\n</li>\n</ul>\n"
        },
        {
            "name": "Library",
            "description": "<h3>Gong’s “Library” API endpoints allow you to:</h3>\n<ul>\n<li>\nRequest all the calls in a specific folder.\n</li>\n<li>\nRequest all the Library folders. We do not allow retrieval of either private or archived folders.\n</li>\n</ul>\n"
        },
        {
            "name": "CRM",
            "description": "<style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>If you are using the deprecated endpoints, download the <a href=\"/r/img/permanent/crm_api_deprecated_endpoints.pdf\" target=\"_blank\">PDF file</a>.</p><h1>What does the CRM API do?</h1><p>This API enables integration with CRMs that are not natively integrated with Gong, so that Gong can provide you with its full capabilities based on your CRM data. This includes:</p><ul>  <li>Pipeline review and forecast</li>  <li>Narrow down conversations (calls and emails) by customer data for coaching and analytics</li>  <li>Track initiatives and adoption based on accounts and opportunities</li></ul><p>By uploading your CRM data to Gong, your Gong users will be able to see their CRM deals in the Gong Deals page, view deal boards to follow up on deal progress, get warnings for deals that are at risk, and see whether their team will reach its quota. The CRM data is also displayed in conversations and calls, so that your Gong users can see account and contact data such as the name and job title of the contact in the call. Account data is displayed in the Accounts page, together with the history of all communication and contact with the company.</p><p><b>Note</b>: Gong provides native integrations with Salesforce, HubSpot and Microsoft Dynamics 365.</p><h2>API Protocol</h2>The API protocol is based on REST guidelines. Check <a href=\"https://app.gong.io/company/api-authentication?currentTab=MY_API_TAB\">here</a> what's your base URL for all API calls.\n<p>The payload is either a JSON object or, for API calls that upload lists of objects, line delimited JSON (see: <a href=\"https://en.wikipedia.org/wiki/JSON_streaming#Newline-Delimited_JSON\">JSON streaming</a>). JSON objects should be UTF-8 encoded.</p><p>Dates and timestamps in JSON objects should be in ISO-8601 format without milliseconds (e.g. '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).</p><h2>What data can I upload?</h2><p>To see your CRM data in Gong, upload the following entities:</p><ul>  <li>Business User: The CRM user, such as a seller or manager. </li>  <li>Account: The customer details in the CRM</li>  <li>Contact: A specific contact in the CRM that is associated with a customer</li>  <li>Deal: A deal or opportunity, or a contract of a specific account in the CRM</li>  <li>Lead: A potential customers who are not associated with an account</li>  <li>Stage: The list of stages the deal can be in, in your CRM</li></ul><h2>Uploading CRM data to Gong</h2><p>This diagram shows how to set up your system in order to upload CRM data to Gong. This is relevant for each scenario of uploading data, initial, incremental and uploading historical data.</p><img alt=\"\" src=\"/r/img/permanent/crm_api_flow.png\" height=\"95%\" ><h3>Registering your Integration</h3><p>Register your integration to get an integrationId used to identify your company's integration with Gong. This is a one time action that does not need to be repeated unless you delete your integration.</p><p>Use <code>PUT v2/crm/integrations</code> to register your integration. The integration Id is returned in the response. Include the integration Id each time you upload your CRM data.</p><h3>Uploading additional data for CRM entities</h3><p>Each CRM entity has a set of standard fields. In addition, you may want to upload additional fields.</p><p>Use the <code>POST /v2/crm/entity-schema</code> to adjust the schema according to your needs. Once you have uploaded your schema to Gong, you can upload your entities with the additional fields.</p><h3>Uploading your CRM data to Gong</h3><p>This section explains how you can use the CRM API to upload your data to Gong:</p><h4>First-time upload</h4><p>Create a database dump of the data you want to upload to Gong based on your CRM schema and data. When uploading your data for the first time you should include all of the CRM records that should appear in Gong.</p><h4>Incremental upload </h4><p>Send regular incremental data updates to Gong. You can update your data as often as you like, we recommend updating between every 1-5 minutes.<br>You should only send new records or records that have changed since the previous upload of data. New records are added to Gong and existing records are updated or deleted, whichever is relevant. Entities are identified by the objectId. Ensure that this ID remains the same each time it is updated.</p><p>When updating data, the modificationDate parameter is mandatory. This enables us to maintain accurate historical data. If your CRM does not store the modification date, send the date the API call is made.</p><h4>Uploading data change history</h4><p>Gong incorporates historical change data in different areas of Gong in order to provide a more accurate picture of the status of different entities at that time. For example, showing the correct stage of a deal at the time a call was made.</p><p>If your CRM stores record history, you are encouraged to load historical change data as part of the integration. You can do this at any time, but we recommend doing this after the initial upload as follows:</p><ol>  <li>Generate the JSON files with the relevant data. Ensure that the modifiedDate is set to the date the entity was updated.</li>  <li>Upload the entities with their historical data using the <code>POST /v2/crm/entities?objectType=ACCOUNT|CONTACT|DEAL|LEAD</code> endpoint.</li></ol><h2>Gong Data Model</h2><p>This diagram shows the connection between the different objects in the CRM API:</p><img alt=\"\" src=\"/r/img/permanent/crm_api_model.png\" height=\"80%\"><p>The following relationship between entities must exist:</p><ul>  <li>A contact must be linked to a single account.</li>  <li>A deal is linked to a single account.</li>  <li>A deal has an owner who is a user in Gong.</li>  <li>A converted lead is expected to be converted into an account and/or a deal and/or a contact.</li></ul><h2>What if my CRM doesn't match the Gong data model?</h2><p>It is possible that your CRM entity model won't match the Gong CRM entity model. Your CRM may store your data in different entities, or you may not have an entity that represents one of the Gong CRM entities.</p><p>In order to upload your CRM data and associate it with calls and conversations, you need to identify the objects in your CRM which match the Gong CRM entities.</p><p>The account is a mandatory entity which must be uploaded in order to integrate Gong with your CRM. To upload account data, identify your CRM entities that contain data about your customers or companies that you do business with. These customers are not actual people within the org, rather they represent the org itself.</p><p>To upload contact details, identify your CRM entities that hold data about employees in the company that your reps are in touch with. A contact represents a person where communication has advanced beyond the prospect stage. Your reps will have multiple conversations and interactions with the contact.</p><p>The deal represents the selling process to the customer (account).</p><p>The lead is a prospect or potential contact, who is not yet associated with an account. If your CRM has an entity which represents people who you contact in the very early stages, and who is later converted to another entity which represents the people you are doing business with (the contact), upload this data as a lead entity.</p><h2>When will my CRM data be displayed in Gong?</h2><p>In addition to the time it takes for data to upload to Gong, the data is first uploaded as raw data and is not automatically available in Gong.</p><br><br><br><br>"
        },
        {
            "name": "Auditing",
            "description": "<h3>Gong’s “Auditing” API endpoints allow you to request the following log types from Gong:</h3>\n<ul>\n<li>\nAccess Log - This log is preserved for 14 days only\n</li>\n<li>\nUser Activity Log - The data is available since March 2021\n</li>\n<li>\nUser Call Play Log - All data is available since inception\n</li>\n<li>\nExternally Shared Call Access Log - All data is available since inception\n</li>\n<li>\nExternally Shared Call Play Log - All data is available since inception\n</li>\n</ul>\n"
        },
        {
            "name": "Meetings (in Beta Phase)",
            "description": "<h3>Gong’s “Consent Meeting” API endpoints allow you to:</h3>\n<ul>\n<li>\nRequest creating a Gong Consent meeting link\n</li>\n<li>\nUpdate a Consent Meeting’s details\n</li>\n<li>\nDelete a Consent Meeting\n</li>\n<li>\nList all Licensed Users in the Gong instance and their Consent Page status\n</li>\n</ul>\n<h3>The requested calls may contain the following meeting details:</h3>\n<ul>\n<li>\nMeeting Scheduled Start Time\n</li>\n<li>\nMeeting Scheduled End Time\n</li>\n<li>\nOrganizer\n</li>\n<li>\nMeeting Title\n</li>\n<li>\nInvitees\n</li>\n<li>\nExternal Meeting Id - The ID as it is formed on an external system\n</li>\n</ul>\n"
        },
        {
            "name": "Permissions",
            "description": "<h3>Gong’s \"Permission\" API endpoints allow you to:</h3>\n<ul>\n<li>\nList all permission profiles in a given workspace\n</li>\n<li>\nCreate permission profile\n</li>\n<li>\nGet a permission profile\n</li>\n<li>\nUpdate permission profile\n</li>\n<li>\nList all users controlled by a permission profile\n</li>\n<li>\nAllow users individual access to calls\n</li>\n<li>\nRemove user's individual access to calls\n</li>\n<li>\nRetrieve users that have individual access to calls\n</li>\n</ul>\n"
        },
        {
            "name": "Engage Flows",
            "description": "<h3>Gong’s “Flows” API endpoints allow you to:</h3>\n<ul>\n<li>\nView a list of relevant Gong Engage flows to choose from and the current flow assignment status\n</li>\n<li>\nAdd prospects to Gong Engage flows\n</li>\n</ul>\n"
        },
        {
            "name": "Digital Interactions",
            "description": "<p>Digital interactions (DIs) are events people make when interacting with (mostly) digital content. It can be described as an action someone did on an object. Anything from viewing a document or a video, to registering/completing a course or someone visiting your website. </p><p>The below proposed Digital Interactions API allows mainly tech-partners (and also customers) to capture and track user interactions with various types of digital content. It provides a structured schema for recording a person’s identity, action, content details, and additional contextual information. The API enables seamless integration between tech-partner systems and the Gong platform, providing valuable insights into buyer-seller interactions that sometimes are hidden from a seller’s line-of-sight. </p><p> For simplicity & clarity, the API scheme is designed according to a real-world scenario, including the following terminology:For simplicity & clarity, the API scheme is designed according to a real-world scenario, including the following terminology:</p><ul>  <li>Event: Represents something that happened, described as an action verb + content engaged (e.g., \"signed a contract\").</li>  <li>Content: Refers to the specific content engaged during the event (e.g., contract). Provides details such as label, title, ID, and URLs.</li>  <li>Person: Represents the individual responsible for the action. Can be a known person or an anonymous user associated with a company.</li>  <li>Content Custom Fields: Custom properties for the content. Example: Custom field - \"Version: 2.0\", Custom field - \"Author: Jane Smith\".</li>  <li>Company: Refers to the organization associated with the person. Example: Company ID - \"7890\", Company name - \"XYZ Corp\".</li>  <li>Partner: An external collaborating organization that owns a software product involved in the digital interactions captured by the API.</li></ul>"
        },
        {
            "name": "Integration Settings",
            "description": "<p>Configure your integration settings for displaying your company data in iFrames. For example, use this API to configure dynamic links as the iFrame source. This endpoint includes validation mechanisms to ensure the integration is secure.</p><p>Mandatory fields are marked with a *.</p>"
        },
        {
            "name": "Engagement (Legacy – See “Digital Interactions”)",
            "description": "<h3>Limited release - contact <a href=\"mailto:integration.requests@gong.io\">integration.requests@gong.io</a> for more information.\n</h3>\n\n<h3>Gong’s \"Engagement\" API endpoints allow you to push engagement events into Gong and display them as events in Gong’s activity timeline.</h3>\n<h3>There are currently 3 types of events:</h3>\n<ul>\n<li>\n\"Content Shared\" Event Type - Use this event type to push engagement events into Gong when a Gong user shares content with external participants (for example, a contract was “shared” by the account executive with his prospects)</li>\n<li>\n\"Content Viewed\" Event Type - Use this event type to push engagement events into Gong when a content is viewed by an external participant (for example, a contract was “viewed” by the prospect)\n</li>\n<li>\n\"Custom Action\" Event Type -  Use this event type to push engagement events into Gong when a content is engaged by an external participant (for example, a contract was “signed” by the prospect)</li>\n</ul>\n"
        }
    ],
    "paths": {
        "/v2/calls": {
            "get": {
                "tags": [
                    "Calls"
                ],
                "summary": "Retrieve call data by date range (/v2/calls)",
                "description": "List calls that took place during a specified date range.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:basic'.",
                "operationId": "listCalls",
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "When paging is needed, provide the value supplied by the previous API call to bring the following page of records.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM"
                    },
                    {
                        "name": "fromDateTime",
                        "in": "query",
                        "description": "Date and time (in ISO-8601 format: '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC) from which to list recorded calls. Returns calls that started on or after the specified date and time. If not provided, list starts with earliest call. For web-conference calls recorded by Gong, the date denotes its scheduled time, otherwise, it denotes its actual start time.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "toDateTime",
                        "in": "query",
                        "description": "Date and time (in ISO-8601 format: '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC) until which to list recorded calls. Returns calls that started up to but excluding specified date and time. If not provided, list ends with most recent call. For web-conference calls recorded by Gong, the date denotes its scheduled time, otherwise, it denotes its actual start time.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "in": "query",
                        "description": "Optional Workspace identifier, if supplied the API will return only the calls belonging to this workspace.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No calls found for the specified period",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Calls"
                ],
                "summary": "Add new call (/v2/calls)",
                "description": "When using this endpoint, either provide a downloadMediaUrl or use the returned callId in a follow-up request to /v2/calls/{id}/media to upload the media file.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:create'.",
                "operationId": "addCall",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewCallAddingRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NewCallAddingResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict, e.g. recording is not enabled for the primary user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/calls/{id}": {
            "get": {
                "tags": [
                    "Calls"
                ],
                "summary": "Retrieve data for a specific call (/v2/calls/{id})",
                "description": "Retrieve data for a specific call.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:basic'.",
                "operationId": "getCall",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Gong's unique numeric identifier for the call (up to 20 digits).",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpecificCall"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Call ID was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/calls/extensive": {
            "post": {
                "tags": [
                    "Calls"
                ],
                "summary": "Retrieve detailed call data by various filters (/v2/calls/extensive)",
                "description": "Lists detailed call data for calls that took place during a specified date range, have specified call IDs or hosted by specified users.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:extensive'. \nMoreover, clients requesting media download URLs by the contentSelector.exposedFields.media field should also have the scope 'api:calls:read:media-url'.",
                "operationId": "listCallsExtensive",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PublicApiBaseRequestWithDataV2CallsRequestFilterWithOwnersContentSelector"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Calls"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No calls found for the specified period",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/permission-profile": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "summary": "Permission profile for a given profile Id (/v2/permission-profile)",
                "description": "Returns a permission profile.",
                "operationId": "getPermissionProfile",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "query",
                        "description": "Permission profile identifier.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PermissionProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Permissions"
                ],
                "summary": "Update permission profile (/v2/permission-profile)",
                "description": "Update a permission profile.",
                "operationId": "updatePermissionProfile",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "query",
                        "description": "Permission profile identifier.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PermissionProfileDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response - returns the entire permission profile after applying the changes.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PermissionProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Permissions"
                ],
                "summary": "Create permission profile (/v2/permission-profile)",
                "description": "Create a permission profile in a given workspace.",
                "operationId": "createPermissionProfile",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "query",
                        "description": "Workspace identifier.\n\nYou can retrieve the workspace using the \"workspaces\" (under \"Settings\") API.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PermissionProfileDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PermissionProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/meetings/{meetingId}": {
            "put": {
                "tags": [
                    "Meetings (in Beta Phase)"
                ],
                "summary": "Update a Gong Meeting (/v2/meetings/{meetingId})",
                "description": "When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:user:update'.",
                "operationId": "updateMeeting",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "Gong's unique identifier for the meeting (up to 20 digits).",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMeetingRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateMeetingResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "This API endpoint is in Limited release - contact your CSM for more information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No meeting found corresponding to the provided meeting ID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict, e.g. consent page is not enabled in your company",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Meetings (in Beta Phase)"
                ],
                "summary": "Delete a Gong Meeting (/v2/meetings)",
                "description": "When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:user:delete'.",
                "operationId": "deleteMeeting",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "Gong's unique identifier for the meeting (up to 20 digits).",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteMeetingRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteMeetingRequest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "This API endpoint is in Limited release - contact your CSM for more information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No Gong meeting found corresponding to the provided organizer email",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict, e.g. consent page is not enabled in your company",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/customer-engagement/content/viewed": {
            "put": {
                "tags": [
                    "Engagement (Legacy – See “Digital Interactions”)"
                ],
                "summary": "Report event of a content view (/v2/customer-engagement/content/viewed)",
                "description": "Push engagement events into Gong and display them as events in Gong’s activity timeline, when a content is viewed by an external participant (for example, a contract was “viewed” by the prospect)\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:engagement-data:write'.",
                "operationId": "contentViewed",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContentViewedEvent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegisterGenericCrmResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict - Event was already reported in the past.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/customer-engagement/content/shared": {
            "put": {
                "tags": [
                    "Engagement (Legacy – See “Digital Interactions”)"
                ],
                "summary": "Report event of a content share (/v2/customer-engagement/content/shared)",
                "description": "Push engagement events into Gong and display them as events in Gong’s activity timeline, when a Gong user shares content with external participants (for example, a contract was “shared” by the account executive with his prospects)\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:engagement-data:write'.",
                "operationId": "contentShared",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContentSharedEvent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegisterGenericCrmResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict - Event was already reported in the past.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/customer-engagement/action": {
            "put": {
                "tags": [
                    "Engagement (Legacy – See “Digital Interactions”)"
                ],
                "summary": "Report event of a custom action (/v2/customer-engagement/action)",
                "description": "Push engagement events into Gong and display them as events in Gong’s activity timeline, when a content is engaged by an external participant (for example, a contract was “signed” by the prospect)\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:engagement-data:write'.",
                "operationId": "customAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomActionEvent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegisterGenericCrmResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict - Event was already reported in the past.",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/crm/integrations": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Get Generic CRM integration details (/v2/crm/integrations)",
                "description": "<style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Returns the CRM integration you set up using the <code>PUT /v2/crm/integrations</code> endpoint. You can only have one integration at a time. </p><p>When accessed using a bearer token, this endpoint requires the 'api:crm:integrations:read' scope.</p>",
                "operationId": "listGenericCrmIntegration",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListGenericCrmIntegrationsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "CRM"
                ],
                "summary": "Register a Generic CRM integration (/v2/crm/integrations)",
                "description": "<style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Creates your CRM integration with Gong. Returns an integrationId, which should be used in requests to the CRM API to enable correct association of CRM data.</p><p>Multiple CRM integrations are not supported. To create a new integration, delete the old one first (<code>DELETE /v2/crm/integrations</code>).</p><p>This includes if you have integrated with Gong using one of the native CRM integrations such as HubSpot or Salesforce.</p><p>When accessed using a bearer token, this endpoint requires the 'api:crm:integration:register' scope.</p>",
                "operationId": "registerGenericCrmIntegration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GenericCrmRegistrationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegisterGenericCrmResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict - An active integration already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "CRM"
                ],
                "summary": "Delete a Generic CRM integration (/v2/crm/integrations)",
                "description": "<style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Asynchronously deletes a CRM integration and all its associated CRM objects (Accounts, Contacts, Deals, Leads, and Users).</p><p>This endpoint gets the clientRequestId generated by you as the request identifier. Use this to check the status of the delete request by calling the <code>/request-status</code> endpoint,with the clientRequestId. </p><p>A status of DONE indicates that the integration and all its associated crm objects have been successfully deleted. This may take up to 24 hours to be deleted.</p><br>When accessed using a bearer token, this endpoint requires the 'api:crm:integration:delete' scope.<h2>Example</h2><code>DELETE https://api.gong.io/v2/crm/integrations?clientRequestId=1234&integrationId=6286478263646</code>",
                "operationId": "deleteGenericCrmIntegration",
                "parameters": [
                    {
                        "name": "integrationId",
                        "in": "query",
                        "description": "The ID of the integration to delete",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "clientRequestId",
                        "in": "query",
                        "description": "A unique identifier generated and sent by you to allow troubleshooting. Valid characters are letters, numbers, dashes and underscores.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully registered the delete integration request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AsyncProcessingResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Client request id has already been used",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/calls/users-access": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "summary": "Give individual users access to calls (/v2/calls/users-access)",
                "description": "Give individual users access to calls.\n\nIf a user already has access (perhaps the call was shared with them, or they have access through their permission profiles) the request will have no effect.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:call-user-access:write'.",
                "operationId": "addUsersAccessToCalls",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CallsUsersAccessAddDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Permissions"
                ],
                "summary": "Retrieve users that have specific individual access to calls (/v2/calls/users-access)",
                "description": "Returns a list of users who have received individual access to calls through the API.\n\nThis endpoint doesn't cover user that have access for other reasons (such as sharing recipients, or access through permission profiles).\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:call-user-access:read'.",
                "operationId": "getUsersAccessToCalls",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FilterRequestCallsAccessGetDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallsAccessDetailsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "summary": "Remove specific individual users access from calls (/v2/calls/users-access)",
                "description": "Remove individual user access from calls. The request can only remove access previously given by the /v2/calls/users-access API.\n\nIf a given user does not have access to the call, they will be unaffected.\n\nIf a given user does have access to the call, but not through the pubic API (for example if the call was shared with the user), the user's access will remain unchanged.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:call-user-access:write'.",
                "operationId": "deleteUsersAccessToCalls",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CallsUsersAccessDeleteDto"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/users/extensive": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "List users by filter (/v2/users/extensive)",
                "description": "List multiple Users.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.",
                "operationId": "listMultipleUsers",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PublicApiBaseRequestV2MultipleUsersRequestWithCreationDates"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersMetadata"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No calls found for the specified period",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/stats/interaction": {
            "post": {
                "tags": [
                    "Stats"
                ],
                "summary": "Retrieve interaction stats for applicable users by date (/v2/stats/interaction)",
                "description": "Returns interaction stats for users based on calls that have Whisper turned on.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:interaction'.",
                "operationId": "listInteractionStats",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PublicApiBaseRequestV2MultipleUsersWithDates"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompanyUsersIntercationStatsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No stats found for the specified period",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/stats/activity/scorecards": {
            "post": {
                "tags": [
                    "Stats"
                ],
                "summary": "Retrieve answered scorecards for applicable reviewed users or scorecards for a date range (/v2/stats/activity/scorecards)",
                "description": "Retrieve all the answers for the scorecards that were reviewed during a specified date range, for calls that took place during a specified date range, for specific scorecards or for specific reviewed users.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:scorecards'.",
                "operationId": "listAnsweredScorecards",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PublicApiBaseRequestV2AnsweredScorecardsFilter"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnsweredScorecards"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Answered scorecards not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/stats/activity/day-by-day": {
            "post": {
                "tags": [
                    "Stats"
                ],
                "summary": "Retrieve daily activity for applicable users for a date range (/v2/stats/activity/day-by-day)",
                "description": "Retrieve the daily activity of multiple users within the Gong system for a range of dates. This endpoint returns records including statistics about each user's activity, on the daily level. Records are returned only for users with activity in the range.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:user-actions:detailed'.",
                "operationId": "listMultipleUsersDayByDayActivity",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PublicApiBaseRequestV2MultipleUsersWithDates"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersDayByDayActivity"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/stats/activity/aggregate": {
            "post": {
                "tags": [
                    "Stats"
                ],
                "summary": "Retrieve aggregated activity for defined users by date (/v2/stats/activity/aggregate)",
                "description": "Lists the activity of multiple users within the Gong system during a defined period. Given the period, this endpoint returns multiple records, one for each user, with an applicable activity during the period. Each record includes statistics about the user's activity.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:user-actions'.",
                "operationId": "listMultipleUsersAggregateActivity",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PublicApiBaseRequestV2MultipleUsersWithDates"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompanyUsersAggregateActivityResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/stats/activity/aggregate-by-period": {
            "post": {
                "tags": [
                    "Stats"
                ],
                "summary": "Retrieve aggregated activity for defined users by a date range with grouping in time periods (/v2/stats/activity/aggregate-by-period)",
                "description": "Lists the aggregated activity of multiple users within the Gong system for each time period within the defined date range. This endpoint returns multiple records, one for each user. For each user there are items for every time period in the date range, including statistics about the user's activity. Records are returned only for users with activity in the range.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:user-actions'.",
                "operationId": "listMultipleUsersAggregateByPeriod",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RequestWithTimePeriod"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersAggregateByPeriodActivity"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/meetings": {
            "post": {
                "tags": [
                    "Meetings (in Beta Phase)"
                ],
                "summary": "Create a New Gong Meeting (/v2/meetings)",
                "description": "When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:user:create'.",
                "operationId": "addMeeting",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewMeetingRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NewMeetingResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "This API endpoint is in Limited release - contact your CSM for more information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No Gong user found corresponding to the provided organizer email",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict, e.g. consent page is not enabled in your company",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/meetings/integration/status": {
            "post": {
                "tags": [
                    "Meetings (in Beta Phase)"
                ],
                "summary": "Validate Gong meeting Integration (/v2/meetings/integration/status)",
                "description": "When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:integration:status'.",
                "operationId": "integrationStatus",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntegrationStatusRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationStatusResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "This API endpoint is in Limited release - contact your CSM for more information.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/integration-settings": {
            "post": {
                "tags": [
                    "Integration Settings"
                ],
                "summary": "Integration Settings (/v2/integration-settings)",
                "description": "When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:integration-settings:write'.",
                "operationId": "integrationSettings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntegrationSettingsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegisterGenericCrmResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict - Event was already reported in the past.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/flows/prospects": {
            "post": {
                "tags": [
                    "Engage Flows"
                ],
                "summary": "List assigned flows for the given prospects (/v2/flows/prospects)",
                "description": "Get the Gong Engage flows assigned to the given prospects.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:flows:read'.",
                "operationId": "getFlowsForProspects",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProspectsAssignedFlowsRequestV2"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProspectsFlowsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/flows/prospects/assign": {
            "post": {
                "tags": [
                    "Engage Flows"
                ],
                "summary": "Assign prospects (contacts or leads) to an Engage flow  (/v2/flows/prospects/assign)",
                "description": "Use this endpoint to assign a number of prospects to a flow. Prospects can be contacts or leads in your CRM.\n\nGenerate a list of comma separated CRM Ids of the prospects you want to add to a flow. The flowInstanceOwnerEmail parameter is the email address of the Gong user who set up the flow instance and owns the flow to-dos.\n\nYou can assign up to 200 prospects to a flow in a single request.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:flows:write'.",
                "operationId": "assignProspects",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AssignFlowRequestV2"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignFlowResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/digital-interaction": {
            "post": {
                "tags": [
                    "Digital Interactions"
                ],
                "summary": "Post a Digital Interaction (/v2/digital-interaction)",
                "description": "When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:digital-interactions:write'.",
                "operationId": "addDigitalInteraction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DigitalInteractionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventAcceptedResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict - Event was already reported in the past.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/data-privacy/erase-data-for-phone-number": {
            "post": {
                "tags": [
                    "Data Privacy"
                ],
                "summary": "Delete the phone number, and all associated elements (/v2/data-privacy/erase-data-for-phone-number)",
                "description": "Given a phone number, this endpoint deletes from the Gong system any leads or contacts with a matching phone number or mobile phone number. Email messages sent to or from these leads/contacts are deleted. Calls where the leads/contacts appear are deleted. The deletion is not immediate, and may take several hours to complete.\n\nThis endpoint contains a data integrity protection mechanism to prevent the deletion of an abnormal number of objects. If the deletion fails please contact support at help@gong.io\n\nDelete the data from your CRM and email system before performing this operation so that private data is not re-imported into Gong.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:data-privacy:delete'.",
                "operationId": "purgePhoneNumber",
                "parameters": [
                    {
                        "name": "phoneNumber",
                        "in": "query",
                        "description": "The phone number.\n\nThis number must start with a + (plus) sign followed by the country code, area code, and local phone number. All other non-digits are ignored.\n\nThe following are examples of permitted phone numbers: +1 425 555 2671, +1-425-555-2671, +1 425 5552671, +14255552671, +1 425 555 26 71, +1(425) 555-2671, etc.\n\nNote: This parameter should be URL-encoded.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "+1(425) 555-2671"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/data-privacy/erase-data-for-email-address": {
            "post": {
                "tags": [
                    "Data Privacy"
                ],
                "summary": "Delete the email address, and all associated elements (/v2/data-privacy/erase-data-for-email-address)",
                "description": "Given an email address, this endpoint deletes from the Gong system any calls or email messages that reference this address. Email messages sent to or from the address are deleted. Calls where the email address appears (as a lead, contact, attendee or speaker) are deleted. Leads or Contacts with the email address are deleted. The deletion is not immediate, and may take several hours to complete.\n\nThis endpoint contains a data integrity protection mechanism to prevent the deletion of an abnormal number of objects. If the deletion fails please contact support at help@gong.io\n\nDelete the data from your CRM and email system before performing this operation so that private data is not re-imported into Gong.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:data-privacy:delete'.",
                "operationId": "purgeEmailAddress",
                "parameters": [
                    {
                        "name": "emailAddress",
                        "in": "query",
                        "description": "The email address.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/crm/entity-schema": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "List Schema Fields (/v2/crm/entity-schema)",
                "description": "<style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Retrieves a list of the object schema fields.</p><p>When accessed using a bearer token, this endpoint requires the scope 'api:crm:schema'.</p><h3>Example</h3><h4>Request</h4><code>GET https://api.gong.io/v2/crm/entity-schema?integrationId=6286478263646&objectType=ACCOUNT</code><h4>Response</h4><code>{    \"requestId\": \"afjkzqkqglog7ueki5\",    \"objectTypeToSelectedFields\": {        \"ACCOUNT\": [            {                \"name\": \"accountTypePicklist\",                \"label\": \"Account Type\",                \"type\": \"PICKLIST\",                \"lastModified\": null,                \"isDeleted\": false,                \"referenceTo\": null,                \"orderedValueList\": null            },            {                \"name\": \"accountTypePicklist2\",                \"label\": \"Account Type2\",                \"type\": \"PICKLIST\",                \"lastModified\": null,                \"isDeleted\": false,                \"referenceTo\": null,                \"orderedValueList\": null            },            {                \"name\": \"fooBar\",                \"label\": \"Foo Bar\",                \"type\": \"STRING\",                \"lastModified\": null,                \"isDeleted\": false,                \"referenceTo\": null,                \"orderedValueList\": null            }        ]    }}</code>",
                "operationId": "listCrmSchemaFields",
                "parameters": [
                    {
                        "name": "integrationId",
                        "in": "query",
                        "description": "Integration ID generated when creating the integration",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "objectType",
                        "in": "query",
                        "description": "Type of object to retrieve the schema fields for (case-sensitive). <br>Omitting this parameter returns the schema for all object types.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACCOUNT",
                                "CONTACT",
                                "DEAL",
                                "LEAD"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved crm schema fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListSelectedFieldsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "CRM"
                ],
                "summary": "Upload Object Schema (/v2/crm/entity-schema)",
                "description": "<style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Enables you to add, edit or remove fields to Gong CRM entities, so that you can display additional CRM data in Gong. Fields that are not included in the Gong CRM objects, and are uploaded without updating your schema, are not displayed in Gong.</p><p>Update your schema when:</p><ul>  <li>You create a new integration</li>  <li>There are changes to the schema of any object type. You can also send a schema update request before any request to the <code>/v2/crm/entities</code> API.</li></ul><p>When updating your schema:</p><ul>  <li>Add or change field: include all fields you want in the schema, including those sent previously. Example:     <table>      <tr>        <th>Date</th>        <th>Action</th>        <th>Result</th>      </tr>      <tr>        <td>3/4/2023</td>        <td>Send account schema with fieldA</td>        <td>fieldA added to the account</td>      </tr>      <tr>        <td>6/4/23</td>        <td>Send account schema with fieldA and fieldB</td>        <td>fieldA still included in account schema. fieldB added to the account</td>      </tr>      <tr>        <td>8/4/23</td>        <td>Send account schema with fieldC but without fieldA and fieldB</td>        <td>Receive an error that you must include all fields in the schema</td>      </tr>      <tr>        <td>15/4/23</td>        <td>Send account schema with fieldB, fieldC, and isDeleted for fieldA</td>        <td>fieldA and all it's data are deleted. fieldB and fieldC remain in the schema</td>      </tr>    </table>  </li>  <li>Changing a field: if you change the field type, a new field is created and the data associated with the original field is deleted. Other changes, such as the label do not result in data being deleted.</li>  <li>Deleting a field: to delete a field and it's associated data, send the field with isDeleted = true</li></ul><p>When accessed using a bearer token, this endpoint requires the 'api:crm:schema' scope.</p><h2>Supported field types</h2><p>This table describes the field types that can be added to your schema</p><table>  <tr><th>Field type</th><th>Format in JSON</th><th>Possible values</th></tr>  <tr><td>BOOLEAN</td><td>boolean</td><td>true, false</td></tr>  <tr><td>DATE</td><td>string (ISO-8601 date without time)</td><td>\"2020-05-31\"</td></tr>  <tr><td>DATETIME</td><td>string (ISO-8601 datetime without milliseconds)</td><td>\"2020-12-17T07:37:21+02:00\"<p>\"2020-12-17T05:37:21Z\"</p></td></tr>  <tr><td>PICKLIST</td><td>string - one of the values in an orderedValueList</td><td>\"Analyst\"</td></tr>  <tr><td>NUMBER</td><td>number</td><td>45.66, 8453</td></tr>  <tr><td>PERCENT</td><td>number (between 0 to 100)</td><td>67.3</td></tr>  <tr><td>CURRENCY*</td><td>number</td><td>34.68</td></tr>  <tr><td>PHONENUMBER</td><td>string</td><td>\"+14055766687\"</td></tr>  <tr><td>EMAILADDRESS</td><td>string</td><td>\"john.doe@anywhere.com\"</td></tr>  <tr><td>REFERENCE</td><td>string - the id of another object</td><td>\"48b009drax\"</td></tr>  <tr><td>ID</td><td>string - the id of the object</td><td>\"843hf8484jr84htg\"</td></tr>  <tr><td>STRING</td><td>string</td><td>\"whatever you want\"</td></tr>  <tr><td>URL</td><td>string</td><td>\"https://crm.com/account/6d4r578f\"</td></tr></table><p>* In the integration send a number value, and specify the correct currency symbol in the Gong UI. Currently Gong does not support multiple currencies per company.</p><h3>Example</h3><h4>Request</h4><p><code>POST https://api.gong.io/v2/crm/entity-schema?integrationId=6286478263646&objectType=ACCOUNT</code></p><p><code>[{\"uniqueName\": \"orderId\", \"label\": \"ID\", \"type\": \"ID\", \"lastModified\": \"2020-11-11T08:11:34+01:00\"},</code></p><p><code>{\"uniqueName\": \"parentAccount\", \"label\": \"Main Account\", \"type\": \"REFERENCE\", \"referenceTo\": \"ACCOUNT\", \"lastModified\": \"2020-11-11T08:11:34+01:00\"},</code></p><p><code>{\"uniqueName\": \"category\", \"label\": \"Category\", \"type\": \"PICKLIST\", \"orderedValueList\": [\"Analyst\", \"Competitor\", \"Customer\", \"Integrator\", \"Investor\", \"Partner\", \"Other\"], \"lastModified\": \"2020-11-11T08:11:34+01:00\"}, </code></p><p>// remove custom field</p><p><code>{\"uniqueName\": \"industry\", \"isDeleted\": true, \"label\": \"Industry\", \"type\": \"PICKLIST\", \"lastModified\": \"2020-11-21T08:11:34+01:00\"}] </code></p>",
                "operationId": "uploadCrmSchemaField",
                "parameters": [
                    {
                        "name": "integrationId",
                        "in": "query",
                        "description": "Integration ID generated when creating the integration",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "objectType",
                        "in": "query",
                        "description": "The object type to set the schema for (case-sensitive)",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACCOUNT",
                                "CONTACT",
                                "DEAL",
                                "LEAD"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GenericSchemaFieldRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successfully uploaded crm schema fields",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SchemaUpdateResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/crm/entities": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Get CRM objects (/v2/crm/entities)",
                "description": "<style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><h2>This API is for use in the <strong>development phase only</strong>, to manually verify that objects are uploaded and processed correctly in Gong.</h2><p>Returns a JSON object where each key is the object’s crm id and the corresponding value is a nested JSON object representing the CRM object fields. Each key in the nested JSON is the field name and the corresponding value is the field value.</p><p>The objects are fetched from the Gong main DB. If the object is not found, the JSON’s value is null.</p><p>The request body contains an array of objects ids.</p><p>The request is limited to 100 objects. If more than 100 objects are requested only the first 100 are returned.</p><p>When accessed using a bearer token, this endpoint requires the 'api:crm:get-objects' scope.</p><h3>Example</h3><h4>Request</h4><code>GET https://api.gong.io/v2/crm/entities?integrationId=6286478263646&objectType=DEAL</code><br><br><code>[\"1234\",\"8765\"] //request body</code>",
                "operationId": "getCrmObjects",
                "parameters": [
                    {
                        "name": "integrationId",
                        "in": "query",
                        "description": "Integration ID generated when creating the integration",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "objectType",
                        "in": "query",
                        "description": "Requested objects type",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACCOUNT",
                                "CONTACT",
                                "DEAL",
                                "LEAD"
                            ]
                        }
                    },
                    {
                        "name": "objectsCrmIds",
                        "in": "query",
                        "description": "<b>Request Body:</b> The requested objects crm ids (should be sent in the request body)",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved requested objects data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetGenericCrmObjectsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/calls/transcript": {
            "post": {
                "tags": [
                    "Calls"
                ],
                "summary": "Retrieve transcripts of calls (/v2/calls/transcript)",
                "description": "Returns transcripts for calls that took place during the specified date period. If call IDs are specified, only transcripts for calls with those IDs that took place during the time period are returned.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:transcript'.",
                "operationId": "getCallTranscripts",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PublicApiBaseRequestV2CallsFilter"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CallTranscripts"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No calls found for the specified period",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/workspaces": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "List all company workspaces (/v2/workspaces)",
                "description": "Returns a list of all workspaces including their details.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:workspaces:read'.",
                "operationId": "listWorkspaces",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkspacesMetadata"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List all users (/v2/users)",
                "description": "List all of the company's users.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.",
                "operationId": "listUsers",
                "parameters": [
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "When paging is needed, provide the value supplied by the previous API call to bring the following page of records.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM"
                    },
                    {
                        "name": "includeAvatars",
                        "in": "query",
                        "description": "Avatars are synthetic users representing Gong employees (CSMs and support providers) when they access your instance. References to avatars' IDs may be found in the outputs of other API endpoints. This parameter is optional, if not provided avatars will not be included in the results.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "boolean"
                        },
                        "example": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersMetadata"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve user (/v2/users/{id})",
                "description": "Retrieve a specific user.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.",
                "operationId": "getUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Gong's unique numeric identifier for the user (up to 20 digits).",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/users/{id}/settings-history": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve user settings history (/v2/users/{id}/settings-history)",
                "description": "Retrieve a specific user's settings history.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.",
                "operationId": "getUserHistory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Gong's unique numeric identifier for the user (up to 20 digits).",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SettingsHistory"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/settings/trackers": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Retrieve tracker details (/v2/settings/trackers)",
                "description": "Retrieves details of all keyword trackers in the system or in a given workspace.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the  'api:settings:trackers:read' scope.",
                "operationId": "listTrackers",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "query",
                        "description": "The ID of the workspace the keyword trackers are in. When empty, all trackers in all workspaces are returned.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Trackers"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Workspace not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/settings/scorecards": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Retrieve scorecards details (/v2/settings/scorecards)",
                "description": "Retrieve all the scorecards within the Gong system.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:settings:scorecards:read'.",
                "operationId": "listScorecards",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Scorecards"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Scorecards not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/permission-profile/users": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "summary": "List all users attached to a given permission profile (/v2/permission-profile/users)",
                "description": "Returns a list of all users whose access is controlled by the given permission profile.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.",
                "operationId": "listPermissionProfileUsers",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "query",
                        "description": "Permission profile identifier.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PermissionProfileUsersResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/logs": {
            "get": {
                "tags": [
                    "Auditing"
                ],
                "summary": "Retrieve logs data by type and time range (/v2/logs)",
                "description": "List log entries that took place during a specified time range.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:logs:read'.",
                "operationId": "listLogs",
                "parameters": [
                    {
                        "name": "logType",
                        "in": "query",
                        "description": "Type of logs requested.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "AccessLog",
                                "UserActivityLog",
                                "UserCallPlay",
                                "ExternallySharedCallAccess",
                                "ExternallySharedCallPlay"
                            ]
                        }
                    },
                    {
                        "name": "fromDateTime",
                        "in": "query",
                        "description": "The time from which to retrieve log records, in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "toDateTime",
                        "in": "query",
                        "description": "The time until which to retrieve log records, in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC); if not specified, the logs end with the latest recorded log.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "When paging is needed, provide the value supplied by the previous API call to bring the following page of records.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LogsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No logs found for the specified period",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/library/folders": {
            "get": {
                "tags": [
                    "Library"
                ],
                "summary": "Retrieve Library folders (/v2/library/folders)",
                "description": "Use this endpoint to retrieve a list of public library folders. We do not allow retrieval of either private or archived folders.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:library:read'.",
                "operationId": "getLibraryStructure",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "query",
                        "description": "Workspace identifier. We will retrieve folders which are related to this specific workspace.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LibraryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No folders found for the specified period",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/library/folder-content": {
            "get": {
                "tags": [
                    "Library"
                ],
                "summary": "List of calls in a specific folder (/v2/library/folder-content)",
                "description": "Given a folder id, this endpoint retrieves a list of calls in it.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:library:read'.",
                "operationId": "getCallsInSpecificFolder",
                "parameters": [
                    {
                        "name": "folderId",
                        "in": "query",
                        "description": "Gong's unique numeric identifier for the folder (up to 20 digits).",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LibraryFolderListOfCallsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No folders found for the specified period",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/flows": {
            "get": {
                "tags": [
                    "Engage Flows"
                ],
                "summary": "List Gong Engage flows (/v2/flows)",
                "description": "Engage flows have the following visibility types: \n\n* Company: visible to everyone in the company, can only be edited by users with edit permissions. \n\n* Personal: reps can set up their own flows which are only available to them. \n\n* Shared: reps can share a flow with other reps. Those reps can then add leads to the flow. \n\nThis endpoint returns all company flows, together with personal flows and flows shared with the user specified in the flowEmailOwner parameter. \n\nWhen accessed through a Bearer token authorization method, use the 'api:flows:read' scope. ",
                "operationId": "listFlows",
                "parameters": [
                    {
                        "name": "flowOwnerEmail",
                        "in": "query",
                        "description": "Email of the Gong user whose personal flows and flows shared with the user you want to return.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "test@test.com"
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "When paging is needed, provide the value supplied by the previous API call to bring the following page of records.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM"
                    },
                    {
                        "name": "workspaceId",
                        "in": "query",
                        "description": "Optional Workspace identifier, if supplied the API will return only the flows belonging to this workspace.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": 623457276584334
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FlowsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/data-privacy/data-for-phone-number": {
            "get": {
                "tags": [
                    "Data Privacy"
                ],
                "summary": "Retrieve all references to a phone number. (/v2/data-privacy/data-for-phone-number)",
                "description": "Shows the elements in the Gong system that reference the given phone number. Given a phone number, this endpoint returns details of any leads or contacts with this phone number and their associated calls and email messages.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:data-privacy:read'.",
                "operationId": "findAllReferencesToPhoneNumber",
                "parameters": [
                    {
                        "name": "phoneNumber",
                        "in": "query",
                        "description": "The phone number.\n\nThis number must start with a + (plus) sign followed by the country code, area code, and local phone number. All other non-digits are ignored.\n\nThe following are examples of permitted phone numbers: +1 425 555 2671, +1-425-555-2671, +1 425 5552671, +14255552671, +1 425 555 26 71, +1(425) 555-2671, etc.\n\nNote: This parameter should be URL-encoded.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "+1(425) 555-2671"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PhoneNumberReferences"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/data-privacy/data-for-email-address": {
            "get": {
                "tags": [
                    "Data Privacy"
                ],
                "summary": "Retrieve all references to an email address. (/v2/data-privacy/data-for-email-address)",
                "description": "Shows the elements in the Gong system that reference the given email address. Given an emails address, this endpoint returns details of all calls and email messages that reference this address, and any leads or contacts with this email address.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:data-privacy:read'.",
                "operationId": "findAllReferencesToEmailAddress",
                "parameters": [
                    {
                        "name": "emailAddress",
                        "in": "query",
                        "description": "The email address.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmailAddressReferences"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/crm/request-status": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Get Request Status (/v2/crm/request-status)",
                "description": "<style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Returns the current status of the request for endpoints run asynchronously: </p><ul>  <li>POST /v2/crm/entities</li>  <li>DELETE /v2/crm/integrations</li></ul><p>When accessed using a bearer token, this endpoint requires the 'api:crm:upload' scope.</p><h3>Status Codes</h3><ul>  <li>PENDING: file is pending being processed</li>  <li>IN_PROGRESS: file is being processed</li>  <li>DONE: all objects in the file were successfully processed</li>  <li>FAILED: failed to parse some objects, or a general error occurred when the file was being processed</li></ul><h3>Correcting a file that failed to be processed:</h3><p>When the status in the response is FAILED do one of the following: </p><ul>  <li>If the response includes a list of errors, correct the errors in the file as follows:     <ol>      <li>Using the <code>errors.line</code> attribute, locate and correct the data in the JSON file.</li>      <li>You can resend the entire LDJSON file, or only the corrected records via the relevant API. <br>Note: The response returns a maximum of 20 errors. To make sure you have corrected all errors, upload the entire file repeatedly until you receive a DONE status.</li>    </ol>  </li>  <li>A single error in the form of: <br>{\"line\":0,\"description\":\".....\"} indicates a general processing error:     <ol>      <li>Fix the LDJSON file according to the error message.</li>      <li>Upload the entire LDJSON file again.</li>    </ol>  </li></ul>",
                "operationId": "getRequestStatus",
                "parameters": [
                    {
                        "name": "integrationId",
                        "in": "query",
                        "description": "Integration ID generated when creating the integration",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "clientRequestId",
                        "in": "query",
                        "description": "The client request ID used in the asynchronous endpoint you want to get a status for",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestStatusResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/coaching": {
            "get": {
                "tags": [
                    "Coaching"
                ],
                "summary": "List all coaching metrics (/v2/coaching)",
                "description": "List all of the coaching metrics of a manager.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:coaching:read'.",
                "operationId": "listUsers_1",
                "parameters": [
                    {
                        "name": "workspace-id",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "manager-id",
                        "in": "query",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Association time filter - only the associations made after that time will be listed. The time is in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC); if not specified all association events will be listed.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Association time filter - only the associations made after that time will be listed. The time is in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC); if not specified all association events will be listed.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CoachingMetrics"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "API request limit exceeded",
                        "headers": {
                            "Retry-After": {
                                "description": "Number of seconds to wait before making a new request.",
                                "style": "simple",
                                "explode": false,
                                "schema": {
                                    "type": "integer",
                                    "format": "int32"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/calls/manual-crm-associations": {
            "get": {
                "tags": [
                    "Calls"
                ],
                "summary": "List all calls that were manually associated with CRM objects (/v2/calls/manual-crm-associations) in Beta Phase",
                "description": "Returns a list of all calls that were manually associated or re-associated with CRM account and deal/opportunity since a given time.\n\nActions will be listed in the ascending order of their timing. \n\nNotice if a call was associated and later re-associated the API will return both events.\n\nWhen accessed through a Bearer token authorization method, this endpoint requires the scope 'api:crm-calls:manual-association:read'.",
                "operationId": "listCRMCallsManualAssociation",
                "parameters": [
                    {
                        "name": "fromDateTime",
                        "in": "query",
                        "description": "Association time filter - only the associations made after that time will be listed. The time is in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC); if not specified all association events will be listed.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "When paging is needed, provide the value supplied by the previous API call to bring the following page of records.",
                        "required": false,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ManualAssociationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/all-permission-profiles": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "summary": "List all company permission profiles for a given workspace (/v2/all-permission-profiles)",
                "description": "Returns a list of all permission profiles.\n\nThe listing is in the alphabetical order of the profile names.",
                "operationId": "listPermissionProfile",
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "query",
                        "description": "Workspace identifier, the API will return only the profiles belonging to this workspace.\n\nYou can retrieve the workspace using the \"workspaces\" (under \"Settings\") API.",
                        "required": true,
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PermissionProfilesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Access denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to complete the operation due to an unexpected error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "BasicAuth": {
                "type": "http",
                "scheme": "basic"
            }
        },
        "schemas": {
            "CallAccessWithPermissionLevel": {
                "type": "object",
                "properties": {
                    "permissionLevel": {
                        "type": "string",
                        "description": "Permission access scope.",
                        "enum": [
                            "all",
                            "managers-team",
                            "report-to-them",
                            "own",
                            "none",
                            "all / managers-team / report-to-them / own / none"
                        ]
                    },
                    "teamLeadIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                        "example": [
                            "295738305212375930"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                            "example": "[\"295738305212375930\"]"
                        }
                    }
                },
                "description": "Calls access permission."
            },
            "CoachingAccessWithPermissionLevel": {
                "type": "object",
                "properties": {
                    "permissionLevel": {
                        "type": "string",
                        "description": "Permission access scope.",
                        "enum": [
                            "all",
                            "managers-team",
                            "report-to-them",
                            "own",
                            "none",
                            "all / managers-team / report-to-them / own / none"
                        ]
                    },
                    "teamLeadIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                        "example": [
                            "295738305212375930"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                            "example": "[\"295738305212375930\"]"
                        }
                    }
                },
                "description": "Coaching access permission."
            },
            "DealsAccessWithPermissionLevel": {
                "type": "object",
                "properties": {
                    "permissionLevel": {
                        "type": "string",
                        "description": "Permission access scope.",
                        "enum": [
                            "all",
                            "managers-team",
                            "report-to-them",
                            "own",
                            "none",
                            "all / managers-team / report-to-them / own / none"
                        ]
                    },
                    "teamLeadIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                        "example": [
                            "295738305212375930"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                            "example": "[\"295738305212375930\"]"
                        }
                    }
                },
                "description": "Deals access permission."
            },
            "EmailsAccessWithPermissionLevel": {
                "type": "object",
                "properties": {
                    "permissionLevel": {
                        "type": "string",
                        "description": "Permission access scope.",
                        "enum": [
                            "all",
                            "managers-team",
                            "report-to-them",
                            "own",
                            "none",
                            "all / managers-team / report-to-them / own / none"
                        ]
                    },
                    "teamLeadIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                        "example": [
                            "295738305212375930"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                            "example": "[\"295738305212375930\"]"
                        }
                    }
                },
                "description": "Emails access permission."
            },
            "ForecastAccess": {
                "type": "object",
                "properties": {
                    "permissionLevel": {
                        "type": "string",
                        "description": "Permission access scope.",
                        "enum": [
                            "all",
                            "managers-team",
                            "report-to-them",
                            "own",
                            "none",
                            "all / managers-team / report-to-them / own / none"
                        ]
                    },
                    "teamLeadIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                        "example": [
                            "295738305212375930"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                            "example": "[\"295738305212375930\"]"
                        }
                    }
                },
                "description": "User can view forecast submissions."
            },
            "ForecastEditSubmissions": {
                "type": "object",
                "properties": {
                    "permissionLevel": {
                        "type": "string",
                        "description": "Permission access scope.",
                        "enum": [
                            "all",
                            "managers-team",
                            "report-to-them",
                            "own",
                            "none",
                            "all / managers-team / report-to-them / own / none"
                        ]
                    },
                    "teamLeadIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                        "example": [
                            "295738305212375930"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                            "example": "[\"295738305212375930\"]"
                        }
                    }
                },
                "description": "User can edit forecasts submissions."
            },
            "ForecastEditTargets": {
                "type": "object",
                "properties": {
                    "permissionLevel": {
                        "type": "string",
                        "description": "Permission access scope.",
                        "enum": [
                            "all",
                            "managers-team",
                            "report-to-them",
                            "own",
                            "none",
                            "all / managers-team / report-to-them / own / none"
                        ]
                    },
                    "teamLeadIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                        "example": [
                            "295738305212375930"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                            "example": "[\"295738305212375930\"]"
                        }
                    }
                },
                "description": "User can edit forecast Targets."
            },
            "ForecastPermissions": {
                "type": "object",
                "properties": {
                    "forecastAccess": {
                        "$ref": "#/components/schemas/ForecastAccess",
                        "exampleSetFlag": false
                    },
                    "forecastEditSubmissions": {
                        "$ref": "#/components/schemas/ForecastEditSubmissions",
                        "exampleSetFlag": false
                    },
                    "forecastEditTargets": {
                        "$ref": "#/components/schemas/ForecastEditTargets",
                        "exampleSetFlag": false
                    }
                },
                "description": "All forecast permissions."
            },
            "InsightsAccessWithPermissionLevel": {
                "type": "object",
                "properties": {
                    "permissionLevel": {
                        "type": "string",
                        "description": "Permission access scope.",
                        "enum": [
                            "all",
                            "managers-team",
                            "report-to-them",
                            "own",
                            "none",
                            "all / managers-team / report-to-them / own / none"
                        ]
                    },
                    "teamLeadIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                        "example": [
                            "295738305212375930"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                            "example": "[\"295738305212375930\"]"
                        }
                    }
                },
                "description": "Insights access permission."
            },
            "LibraryFolderAccess": {
                "type": "object",
                "properties": {
                    "permissionLevel": {
                        "type": "string",
                        "description": "Library folder permission level - mandatory value.",
                        "enum": [
                            "none",
                            "all",
                            "specific-folders",
                            "none, all, specific-folders"
                        ]
                    },
                    "libraryFolderIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of library folder Ids, if set, \"permissionLevel\" must not be \"none\".",
                        "example": [
                            "3843152912968920037"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of library folder Ids, if set, \"permissionLevel\" must not be \"none\".",
                            "example": "[\"3843152912968920037\"]"
                        }
                    },
                    "managePublicFolder": {
                        "type": "boolean",
                        "description": "A user with this profile can manage public folder, if set, \"permissionLevel\" must not be \"none\".",
                        "example": true
                    },
                    "manageStreams": {
                        "type": "boolean",
                        "description": "A user with this profile can manage streams, if set, \"permissionLevel\" must not be \"none\".",
                        "example": true
                    },
                    "manageFolderCalls": {
                        "type": "boolean",
                        "description": "A user with this profile can add calls to folders, archive calls, if set, \"permissionLevel\" must not be \"none\".",
                        "example": true
                    },
                    "shareFoldersAndStreams": {
                        "type": "boolean",
                        "description": "A user with this profile can share folders and streams from Your Library with other team members, if set, \"permissionLevel\" must not be \"none\".",
                        "example": true
                    }
                },
                "description": "Library folder access permission."
            },
            "PermissionProfileDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique numeric identifier of the permission profile (up to 20 digits).",
                        "example": "3843152912968920037"
                    },
                    "name": {
                        "type": "string",
                        "description": "Permission profile name.",
                        "example": "Profile"
                    },
                    "description": {
                        "type": "string",
                        "description": "Permission profile description.",
                        "example": "Description"
                    },
                    "callsAccess": {
                        "$ref": "#/components/schemas/CallAccessWithPermissionLevel",
                        "exampleSetFlag": false
                    },
                    "libraryFolderAccess": {
                        "$ref": "#/components/schemas/LibraryFolderAccess",
                        "exampleSetFlag": false
                    },
                    "dealsAccess": {
                        "$ref": "#/components/schemas/DealsAccessWithPermissionLevel",
                        "exampleSetFlag": false
                    },
                    "forecastPermissions": {
                        "$ref": "#/components/schemas/ForecastPermissions",
                        "exampleSetFlag": false
                    },
                    "coachingAccess": {
                        "$ref": "#/components/schemas/CoachingAccessWithPermissionLevel",
                        "exampleSetFlag": false
                    },
                    "insightsAccess": {
                        "$ref": "#/components/schemas/InsightsAccessWithPermissionLevel",
                        "exampleSetFlag": false
                    },
                    "usageAccess": {
                        "$ref": "#/components/schemas/UsageAccessWithPermissionLevel",
                        "exampleSetFlag": false
                    },
                    "emailsAccess": {
                        "$ref": "#/components/schemas/EmailsAccessWithPermissionLevel",
                        "exampleSetFlag": false
                    },
                    "scoreCalls": {
                        "type": "boolean",
                        "description": "User can score calls.",
                        "example": true
                    },
                    "downloadCallMedia": {
                        "type": "boolean",
                        "description": "User can download call media.",
                        "example": true
                    },
                    "shareCallsWithCustomers": {
                        "type": "boolean",
                        "description": "User can share calls with customers.",
                        "example": true
                    },
                    "manuallyScheduleAndUploadCalls": {
                        "type": "boolean",
                        "description": "User can manually schedule and upload calls.",
                        "example": true
                    },
                    "privateCalls": {
                        "type": "boolean",
                        "description": "User can set their own calls as private.",
                        "example": true
                    },
                    "deleteCalls": {
                        "type": "boolean",
                        "description": "User can delete calls.",
                        "example": true
                    },
                    "trimCalls": {
                        "type": "boolean",
                        "description": "User can trim calls.",
                        "example": true
                    },
                    "listenInCalls": {
                        "type": "boolean",
                        "description": "User can listen in calls.",
                        "example": true
                    },
                    "deleteEmails": {
                        "type": "boolean",
                        "description": "User can delete emails.",
                        "example": true
                    },
                    "callsAndSearch": {
                        "type": "boolean",
                        "description": "User can view and search calls.",
                        "example": true
                    },
                    "library": {
                        "type": "boolean",
                        "description": "User can view library pages.",
                        "example": true
                    },
                    "deals": {
                        "type": "boolean",
                        "description": "User can view deals pages.",
                        "example": true
                    },
                    "createEditAndDeleteDealsBoards": {
                        "type": "boolean",
                        "description": "User can create/edit/delete deals boards.",
                        "example": true
                    },
                    "dealsInlineEditing": {
                        "type": "boolean",
                        "description": "User can perform inline editing of deals.",
                        "example": true
                    },
                    "account": {
                        "type": "boolean",
                        "description": "User can view account pages.",
                        "example": true
                    },
                    "coaching": {
                        "type": "boolean",
                        "description": "User can view coaching pages.",
                        "example": true
                    },
                    "usage": {
                        "type": "boolean",
                        "description": "User can view usage pages.",
                        "example": true
                    },
                    "teamStats": {
                        "type": "boolean",
                        "description": "User can view team stats page.",
                        "example": true
                    },
                    "initiatives": {
                        "type": "boolean",
                        "description": "User can view initiatives page.",
                        "example": true
                    },
                    "market": {
                        "type": "boolean",
                        "description": "User can view market page.",
                        "example": true
                    },
                    "activity": {
                        "type": "boolean",
                        "description": "User can view activity pages.",
                        "example": true
                    },
                    "forecast": {
                        "type": "boolean",
                        "description": "User can view forecast pages.",
                        "example": true
                    },
                    "forecastManage": {
                        "type": "boolean",
                        "description": "User can manage forecast boards and upload targets.",
                        "example": true
                    },
                    "engageManageCompanyTemplates": {
                        "type": "boolean",
                        "description": "User can manage company email templates.",
                        "example": true
                    },
                    "engageManageCompanySequences": {
                        "type": "boolean",
                        "description": "User can manage company sequences.",
                        "example": true
                    },
                    "engageSnoozeFlowToDosForOthers": {
                        "type": "boolean",
                        "description": "User can snooze flow in to dos for others",
                        "example": true
                    },
                    "manageGeneralBusinessSettings": {
                        "type": "boolean",
                        "description": "User can manage general business settings.",
                        "example": true
                    },
                    "manageScorecards": {
                        "type": "boolean",
                        "description": "User can manage scorecards.",
                        "example": true
                    },
                    "exportCallsAndCoachingDataToCSV": {
                        "type": "boolean",
                        "description": "User can export calls and coaching metrics data to CSV.",
                        "example": true
                    },
                    "crmDataInlineEditing": {
                        "type": "boolean",
                        "description": "User can perform inline editing of crm data.",
                        "example": true
                    },
                    "crmDataImport": {
                        "type": "boolean",
                        "description": "User can perform import of crm data.",
                        "example": true
                    },
                    "viewRevenueAnalytics": {
                        "type": "boolean",
                        "description": "User can view dashboards page.",
                        "example": true
                    },
                    "manageRevenueAnalytics": {
                        "type": "boolean",
                        "description": "User can manage revenue analytics.",
                        "example": true
                    }
                },
                "description": "Permission profile"
            },
            "PermissionProfileResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "profile": {
                        "$ref": "#/components/schemas/PermissionProfileDTO",
                        "exampleSetFlag": false
                    }
                }
            },
            "UsageAccessWithPermissionLevel": {
                "type": "object",
                "properties": {
                    "permissionLevel": {
                        "type": "string",
                        "description": "Permission access scope.",
                        "enum": [
                            "all",
                            "managers-team",
                            "report-to-them",
                            "own",
                            "none",
                            "all / managers-team / report-to-them / own / none"
                        ]
                    },
                    "teamLeadIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                        "example": [
                            "295738305212375930"
                        ],
                        "items": {
                            "type": "string",
                            "description": "List of user IDs to populate the managers-team permission level\n\nYou can retrieve the user ids by using the “Users” API.",
                            "example": "[\"295738305212375930\"]"
                        }
                    }
                },
                "description": "Usage access permission."
            },
            "ErrorResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "errors": {
                        "type": "array",
                        "description": "Error messages.",
                        "example": [
                            "An error has occurred"
                        ],
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "UpdateMeetingResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "meetingId": {
                        "type": "string",
                        "description": "The unique meeting identifier of the meeting.",
                        "example": "7782342274025937895"
                    }
                }
            },
            "MeetingInvitee": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The unique meeting to identify the meeting.",
                        "example": "test@test.com"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the person.",
                        "example": "Test User"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The first name of the person, if available.",
                        "example": "Jon"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The last name of the person, if available.",
                        "example": "Snow"
                    }
                },
                "description": "Attendees the requesting party should add to the invitation, this should support adding email addresses such as coordinator@gong.io for Gong to schedule the recording of the meeting.",
                "example": [
                    {
                        "displayName": "Gong Assistant",
                        "email": "assistant@gong.io"
                    }
                ]
            },
            "UpdateMeetingRequest": {
                "required": [
                    "endTime",
                    "invitees",
                    "organizerEmail",
                    "startTime"
                ],
                "type": "object",
                "properties": {
                    "startTime": {
                        "type": "string",
                        "description": "The meeting start time in ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).",
                        "example": "2018-02-17T02:30:00-08:00"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "The meeting end time in ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).",
                        "example": "2018-02-19T02:30:00-08:00"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the event.",
                        "example": "Example call"
                    },
                    "invitees": {
                        "type": "array",
                        "description": "A list of email addresses of invitees to the event (not including the organizer).",
                        "example": [
                            {
                                "displayName": "Cookie Monster",
                                "email": "cookie.monster@cookies.com"
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/MeetingInvitee"
                        }
                    },
                    "externalId": {
                        "type": "string",
                        "description": "The ID as it is formed on the external system.",
                        "example": "7JEHFRGXDDZFEW2FC4U"
                    },
                    "organizerEmail": {
                        "type": "string",
                        "description": "The email address of the user who created the meeting.",
                        "example": "test@test.com"
                    }
                },
                "description": "Meeting update metadata"
            },
            "RegisterGenericCrmResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "integrationId": {
                        "type": "integer",
                        "description": "<style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style>Your integration ID to be used in requests to the API. This ensures you are accessing the correct integration.<br><b>Note:</b> Parse the integrationId as Long or BigInt. Parsing the integrationId as an Integer will truncate the integrationId to trailing zeros and will return an incorrect ID.",
                        "format": "int64",
                        "example": 5517027188234205706
                    }
                }
            },
            "Actor": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the person, if available.",
                        "example": "test@test.com"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the person, if available.",
                        "example": "Test User"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the person, if available.",
                        "example": "Enterprise Account Executive"
                    },
                    "context": {
                        "type": "array",
                        "description": "A list of links to external systems such as CRM, Telephony System, Case Management, etc.",
                        "items": {
                            "$ref": "#/components/schemas/PartyUploadContext"
                        }
                    }
                }
            },
            "CallUploadContext": {
                "required": [
                    "system"
                ],
                "type": "object",
                "properties": {
                    "system": {
                        "type": "string",
                        "description": "External system name. Currently only Salesforce and Generic are supported.",
                        "example": "Salesforce",
                        "enum": [
                            "Salesforce",
                            "HubSpot",
                            "MicrosoftDynamic",
                            "Generic"
                        ]
                    },
                    "objects": {
                        "type": "array",
                        "description": "List of objects within the external system. Note: Multiple opportunities/deals belonging to the same account are not supported.",
                        "items": {
                            "$ref": "#/components/schemas/ExternalCrmCallObject"
                        }
                    }
                },
                "description": "Links to external systems such as CRM, Telephony System, Case Management etc. Currently only Salesforce and Generic are supported."
            },
            "ContentViewedEvent": {
                "required": [
                    "contentId",
                    "contentTitle",
                    "contentUrl",
                    "eventTimestamp",
                    "reportingSystem"
                ],
                "type": "object",
                "properties": {
                    "reportingSystem": {
                        "type": "string",
                        "description": "The unique identifier of the reporting system. It is the same value in all events originating from the same system.",
                        "example": "abc123"
                    },
                    "eventTimestamp": {
                        "type": "string",
                        "description": "The date and time when the event happened in the ISO-8601 format (e.g., '2021-08-01T02:30:00+05:00' or '2021-08-01T08:00:00Z', where Z stands for UTC);",
                        "example": "2021-02-17T02:30:00-08:00"
                    },
                    "eventId": {
                        "type": "string",
                        "description": "The original id of the event as designated in the reporting system.",
                        "example": "abc123"
                    },
                    "contentId": {
                        "type": "string",
                        "description": "The id of the content that was viewed in the reporting system.",
                        "example": "doc_123456789"
                    },
                    "contentUrl": {
                        "type": "string",
                        "description": "The url of the content that was viewed in the reporting system. This is the url that is was accessed by the viewer.",
                        "example": "https://example.com/doc_123456789"
                    },
                    "contentTitle": {
                        "type": "string",
                        "description": "Human readable title of the content.",
                        "example": "Features & Spec V.1"
                    },
                    "viewActionTitle": {
                        "type": "string",
                        "description": "The name of the action like \"Document Viewed\" or \"Presentation Opened\".",
                        "example": "My Title"
                    },
                    "shareId": {
                        "type": "string",
                        "description": "The id of the share action that corresponds to this view event, in case there can be more than one share per content.",
                        "example": "abc123"
                    },
                    "viewInfoUrl": {
                        "type": "string",
                        "description": "The link to a page that presents additional information about this event.",
                        "example": "https://example.com/path/to/a/page"
                    },
                    "viewer": {
                        "$ref": "#/components/schemas/Actor",
                        "exampleSetFlag": false
                    },
                    "crmContext": {
                        "type": "array",
                        "description": "A list of references to external systems such as CRM, Telephony System, Case Management, etc.",
                        "items": {
                            "$ref": "#/components/schemas/CallUploadContext"
                        }
                    },
                    "contentProperties": {
                        "type": "array",
                        "description": "A list of additional properties for the content",
                        "items": {
                            "$ref": "#/components/schemas/Generic Property"
                        }
                    },
                    "eventProperties": {
                        "type": "array",
                        "description": "A list of additional properties for the event",
                        "items": {
                            "$ref": "#/components/schemas/Generic Property"
                        }
                    },
                    "userAgent": {
                        "type": "string",
                        "description": "\"User-Agent\" header value for browser based interaction"
                    },
                    "mobileAppId": {
                        "type": "string",
                        "description": "The application identification string in case of interaction via mobile application (bundle identifier or package name)."
                    },
                    "agentPlatform": {
                        "type": "string",
                        "description": "Platform on which the interaction was made",
                        "enum": [
                            "Windows, Linux, MacOS, iOS, Android"
                        ]
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "Optional workspace identifier. If specified, the event will be placed into this workspace, otherwise, the default algorithm for workspace placement will be applied.",
                        "example": "623457276584334"
                    },
                    "nonCompanyParticipants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Actor"
                        }
                    },
                    "moreInfoUrl": {
                        "type": "string"
                    },
                    "actionName": {
                        "type": "string"
                    },
                    "sharer": {
                        "$ref": "#/components/schemas/Sharer",
                        "exampleSetFlag": false
                    },
                    "sharingMessageSubject": {
                        "type": "string"
                    },
                    "sharingMessageBody": {
                        "type": "string"
                    }
                },
                "description": "Content Viewed event"
            },
            "ContextField": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Field name. For Account supported fields are: Name, Website, Industry and all the custom fields. For Opportunity supported fields are Name, LeadSource, Type, StageName, Probability, Amount, CloseDate and all the custom fields.",
                        "example": "name"
                    },
                    "value": {
                        "type": "object",
                        "description": "Field value",
                        "example": "Gong Inc."
                    }
                },
                "description": "External object data"
            },
            "CrmPartyContextField": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Field name",
                        "example": "name"
                    },
                    "value": {
                        "type": "object",
                        "description": "Object value",
                        "example": "Gong Inc."
                    }
                },
                "description": "External object data"
            },
            "ExternalCrmCallObject": {
                "required": [
                    "objectId",
                    "objectType"
                ],
                "type": "object",
                "properties": {
                    "objectType": {
                        "type": "string",
                        "description": "Object Type. e.g. Account.",
                        "example": "Account",
                        "enum": [
                            "Opportunity",
                            "Account",
                            "Lead",
                            "Contact",
                            "User",
                            "Opportunity,Account"
                        ]
                    },
                    "objectId": {
                        "type": "string",
                        "description": "Object ID. For Salesforce both case-sensitive and case-insensitive formats are supported.",
                        "example": "0013601230sV7grAAC"
                    },
                    "fields": {
                        "type": "array",
                        "description": "Object fields. Intended for future use only.",
                        "items": {
                            "$ref": "#/components/schemas/ContextField"
                        }
                    }
                },
                "description": "External object associated with the call"
            },
            "ExternalCrmPartyObject": {
                "required": [
                    "objectId",
                    "objectType"
                ],
                "type": "object",
                "properties": {
                    "objectType": {
                        "type": "string",
                        "description": "Object Type. Valid only for non-company parties. e.g. Lead.",
                        "example": "Contact",
                        "enum": [
                            "Lead",
                            "Contact",
                            "Account",
                            "Opportunity",
                            "User",
                            "Lead,Contact"
                        ]
                    },
                    "objectId": {
                        "type": "string",
                        "description": "Object ID. For Salesforce both case-sensitive and case-insensitive formats are supported.",
                        "example": "0013601230sV7grAAC"
                    },
                    "fields": {
                        "type": "array",
                        "description": "Object fields. Intended for future use only.",
                        "items": {
                            "$ref": "#/components/schemas/CrmPartyContextField"
                        }
                    }
                },
                "description": "External object associated with the party"
            },
            "Generic Property": {
                "required": [
                    "dataType",
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Property name."
                    },
                    "value": {
                        "type": "string",
                        "description": "Property value. Value format should match dataType. If dataType is \"number\", value should be passed in JSON number format, e.g. 3.14. If dataType is \"date\", the value should be passed in JSON date format, e.g. 2021-02-17T02:30:00-08:00. If the dataType is \"url\", the value should be valid URL, e.g. \"https://example.com/example?q=v\"",
                        "example": "string"
                    },
                    "dataType": {
                        "type": "string",
                        "description": "Property data type.",
                        "example": "string",
                        "enum": [
                            "number, string, url, date"
                        ]
                    }
                },
                "description": "A list of additional properties for the event"
            },
            "PartyUploadContext": {
                "required": [
                    "system"
                ],
                "type": "object",
                "properties": {
                    "system": {
                        "type": "string",
                        "description": "External system name. Currently only Salesforce and Generic are supported.",
                        "example": "Salesforce",
                        "enum": [
                            "Salesforce",
                            "HubSpot",
                            "MicrosoftDynamic",
                            "Generic"
                        ]
                    },
                    "objects": {
                        "type": "array",
                        "description": "List of objects within the external system",
                        "items": {
                            "$ref": "#/components/schemas/ExternalCrmPartyObject"
                        }
                    }
                },
                "description": "Links to external systems such as CRM, Telephony System, Case Management etc. Currently only Salesforce and Generic are supported."
            },
            "Sharer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The user id in Gong, if available.",
                        "example": "234599484848423"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the person, if available.",
                        "example": "test@test.com"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the person, if available.",
                        "example": "Test User"
                    }
                }
            },
            "ContentSharedEvent": {
                "required": [
                    "contentId",
                    "contentTitle",
                    "contentUrl",
                    "eventTimestamp",
                    "reportingSystem"
                ],
                "type": "object",
                "properties": {
                    "reportingSystem": {
                        "type": "string",
                        "description": "The unique identifier of the reporting system. It is the same value in all events originating from the same system.",
                        "example": "abc123"
                    },
                    "eventTimestamp": {
                        "type": "string",
                        "description": "The date and time when the event happened in the ISO-8601 format (e.g., '2021-08-01T02:30:00+05:00' or '2021-08-01T08:00:00Z', where Z stands for UTC);",
                        "example": "2021-02-17T02:30:00-08:00"
                    },
                    "eventId": {
                        "type": "string",
                        "description": "The original id of the event as designated in the reporting system.",
                        "example": "abc123"
                    },
                    "contentId": {
                        "type": "string",
                        "description": "The id of the content that was shared in the reporting system.",
                        "example": "doc_123456789"
                    },
                    "contentUrl": {
                        "type": "string",
                        "description": "The url of the content that was shared in the reporting system. This is the url that is was accessed by the viewer.",
                        "example": "https://example.com/doc_123456789"
                    },
                    "contentTitle": {
                        "type": "string",
                        "description": "Human readable title of the content.",
                        "example": "Features & Spec V.1"
                    },
                    "shareId": {
                        "type": "string",
                        "description": "The id of the share action, in case there can be more than one share per content.",
                        "example": "abc123"
                    },
                    "shareInfoUrl": {
                        "type": "string",
                        "description": "The link to a page that presents additional information about this event.",
                        "example": "https://example.com/path/to/a/page"
                    },
                    "sharingMessageSubject": {
                        "type": "string",
                        "description": "The subject of share email / message.",
                        "example": "Sample Subject"
                    },
                    "sharingMessageBody": {
                        "type": "string",
                        "description": "The share message body. Can contain HTML and will be cleaned when it is presented.",
                        "example": "<b>Hi</b>"
                    },
                    "sharer": {
                        "$ref": "#/components/schemas/Sharer",
                        "exampleSetFlag": false
                    },
                    "recipients": {
                        "type": "array",
                        "description": "array of objects with  name + email of recipients. Email is required.",
                        "items": {
                            "$ref": "#/components/schemas/Actor"
                        }
                    },
                    "crmContext": {
                        "type": "array",
                        "description": "A list of references to external systems such as CRM, Telephony System, Case Management, etc.",
                        "items": {
                            "$ref": "#/components/schemas/CallUploadContext"
                        }
                    },
                    "contentProperties": {
                        "type": "array",
                        "description": "A list of additional properties for the content",
                        "items": {
                            "$ref": "#/components/schemas/Generic Property"
                        }
                    },
                    "eventProperties": {
                        "type": "array",
                        "description": "A list of additional properties for the event",
                        "items": {
                            "$ref": "#/components/schemas/Generic Property"
                        }
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "Optional workspace identifier. If specified, the event will be placed into this workspace, otherwise, the default algorithm for workspace placement will be applied.",
                        "example": "623457276584334"
                    },
                    "actionName": {
                        "type": "string",
                        "description": "The name of the action like \"Document Sent\" or \"Presentation Shared\".",
                        "example": "My Title"
                    },
                    "nonCompanyParticipants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Actor"
                        }
                    },
                    "moreInfoUrl": {
                        "type": "string"
                    },
                    "mobileAppId": {
                        "type": "string"
                    },
                    "agentPlatform": {
                        "type": "string"
                    },
                    "userAgent": {
                        "type": "string"
                    }
                },
                "description": "Content Shared Event"
            },
            "CustomActionEvent": {
                "required": [
                    "eventTimestamp",
                    "reportingSystem"
                ],
                "type": "object",
                "properties": {
                    "reportingSystem": {
                        "type": "string",
                        "description": "The unique identifier of the reporting system. It is the same value in all events originating from the same system.",
                        "example": "abc123"
                    },
                    "eventTimestamp": {
                        "type": "string",
                        "description": "The date and time when the event happened in the ISO-8601 format (e.g., '2021-08-01T02:30:00+05:00' or '2021-08-01T08:00:00Z', where Z stands for UTC);",
                        "example": "2021-02-17T02:30:00-08:00"
                    },
                    "eventId": {
                        "type": "string",
                        "description": "The original id of the event as designated in the reporting system.",
                        "example": "abc123"
                    },
                    "contentId": {
                        "type": "string",
                        "description": "The id of the content that was viewed in the reporting system.",
                        "example": "doc_123456789"
                    },
                    "contentUrl": {
                        "type": "string",
                        "description": "The url of the content that was viewed in the reporting system. This is the url that is was accessed by the viewer.",
                        "example": "https://example.com/doc_123456789"
                    },
                    "contentTitle": {
                        "type": "string",
                        "description": "Human readable title of the content.",
                        "example": "Features & Spec V.1"
                    },
                    "actionName": {
                        "type": "string",
                        "description": "The name of the action like \"Document Viewed\" or \"Presentation Opened\".",
                        "example": "My Title"
                    },
                    "eventInfoUrl": {
                        "type": "string",
                        "description": "The link to a page that presents additional information about this event.",
                        "example": "https://example.com/path/to/a/page"
                    },
                    "actor": {
                        "$ref": "#/components/schemas/Actor",
                        "exampleSetFlag": false
                    },
                    "crmContext": {
                        "type": "array",
                        "description": "A list of references to external systems such as CRM, Telephony System, Case Management, etc.",
                        "items": {
                            "$ref": "#/components/schemas/CallUploadContext"
                        }
                    },
                    "contentProperties": {
                        "type": "array",
                        "description": "A list of additional properties for the content",
                        "items": {
                            "$ref": "#/components/schemas/Generic Property"
                        }
                    },
                    "eventProperties": {
                        "type": "array",
                        "description": "A list of additional properties for the event",
                        "items": {
                            "$ref": "#/components/schemas/Generic Property"
                        }
                    },
                    "userAgent": {
                        "type": "string",
                        "description": "\"User-Agent\" header value for browser based interaction"
                    },
                    "mobileAppId": {
                        "type": "string",
                        "description": "The application identification string in case of interaction via mobile application (bundle identifier or package name)."
                    },
                    "agentPlatform": {
                        "type": "string",
                        "description": "Platform on which the interaction was made",
                        "enum": [
                            "Windows, Linux, MacOS, iOS, Android"
                        ]
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "Optional workspace identifier. If specified, the event will be placed into this workspace, otherwise, the default algorithm for workspace placement will be applied.",
                        "example": "623457276584334"
                    },
                    "nonCompanyParticipants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Actor"
                        }
                    },
                    "moreInfoUrl": {
                        "type": "string"
                    },
                    "shareId": {
                        "type": "string"
                    },
                    "sharer": {
                        "$ref": "#/components/schemas/Sharer",
                        "exampleSetFlag": false
                    },
                    "sharingMessageSubject": {
                        "type": "string"
                    },
                    "sharingMessageBody": {
                        "type": "string"
                    }
                },
                "description": "Custom Action Event"
            },
            "GenericCrmRegistrationRequest": {
                "required": [
                    "name",
                    "ownerEmail"
                ],
                "type": "object",
                "properties": {
                    "ownerEmail": {
                        "type": "string",
                        "description": "Email address of the person responsible for the integration",
                        "example": "joe.doe@acme.com"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the integration",
                        "example": "ACME Sandbox"
                    }
                }
            },
            "NewCallRecordingResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "callId": {
                        "type": "string",
                        "description": "New call ID",
                        "example": "7782342274025937895"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to the page in the Gong web application where the call is available.",
                        "example": "https://app.gong.io/call?id=7782342274025937895"
                    }
                }
            },
            "BaseResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    }
                }
            },
            "CallUsersAccessDto": {
                "required": [
                    "callId",
                    "userIds"
                ],
                "type": "object",
                "properties": {
                    "callId": {
                        "type": "string",
                        "description": "Gong's unique numeric call ID.",
                        "example": "7782342274025937895"
                    },
                    "userIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Array of Gong's unique numeric user IDs.",
                        "example": [
                            "234599484848423"
                        ],
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Call users access"
            },
            "CallsUsersAccessAddDto": {
                "type": "object",
                "properties": {
                    "callAccessList": {
                        "type": "array",
                        "description": "A list, in which each item specifies a call and a list of users to be given access to this call.",
                        "items": {
                            "$ref": "#/components/schemas/CallUsersAccessDto"
                        }
                    }
                }
            },
            "Records": {
                "type": "object",
                "properties": {
                    "totalRecords": {
                        "type": "integer",
                        "description": "Total number of records.",
                        "format": "int32",
                        "example": 263
                    },
                    "currentPageSize": {
                        "type": "integer",
                        "description": "Number of records in the current page.",
                        "format": "int32",
                        "example": 100
                    },
                    "currentPageNumber": {
                        "type": "integer",
                        "description": "Current page number.",
                        "format": "int32",
                        "example": 0
                    },
                    "cursor": {
                        "type": "string",
                        "description": "Returned only when there are more records to be retrieved. Repeat the API call and pass this cursor value in the request to retrieve the next page of records.",
                        "example": "eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM"
                    }
                },
                "description": "Information about the number of records that match the requested filter."
            },
            "Settings": {
                "type": "object",
                "properties": {
                    "webConferencesRecorded": {
                        "type": "boolean",
                        "description": "True if the team member is set to be recorded by Gong, false if not.",
                        "example": true
                    },
                    "preventWebConferenceRecording": {
                        "type": "boolean",
                        "description": "If true, invitation of this user to a web conference will prevent its recording (even if other users invited are set to record)."
                    },
                    "telephonyCallsImported": {
                        "type": "boolean",
                        "description": "True if the team member is set to import telephony calls from by Gong, false if not."
                    },
                    "emailsImported": {
                        "type": "boolean",
                        "description": "True if the team member is set to import emails by Gong, false if not.",
                        "example": true
                    },
                    "preventEmailImport": {
                        "type": "boolean",
                        "description": "True if the team member is set to prevent import of emails by Gong, false if not."
                    },
                    "nonRecordedMeetingsImported": {
                        "type": "boolean",
                        "description": "True if the team member is set to import non recorded meetings by Gong, false if not.",
                        "example": true
                    },
                    "gongConnectEnabled": {
                        "type": "boolean",
                        "description": "True if the team member has Gong Connect enabled, false if not.",
                        "example": true
                    }
                },
                "description": "The user's settings in the Gong system."
            },
            "UserMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the user (up to 20 digits).",
                        "example": "234599484848423"
                    },
                    "emailAddress": {
                        "type": "string",
                        "description": "The email address of the Gong user.",
                        "example": "test@test.com"
                    },
                    "created": {
                        "type": "string",
                        "description": "Creation time in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC);of the Gong user.",
                        "example": "2018-02-17T02:30:00-08:00"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "True if the user is active, false if not.",
                        "example": true
                    },
                    "emailAliases": {
                        "type": "array",
                        "description": "List of email address aliases of the Gong user.",
                        "example": [
                            "testAlias@test.com"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "trustedEmailAddress": {
                        "type": "string",
                        "description": "The trusted authentication email assigned to the Gong user",
                        "example": "test@test.com"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The first name of the Gong user.",
                        "example": "Jon"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The last name of the Gong user.",
                        "example": "Snow"
                    },
                    "title": {
                        "type": "string",
                        "description": "The job title of the Gong user.",
                        "example": "Enterprise Account Executive"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number of the Gong user.",
                        "example": "+1 123-567-8989"
                    },
                    "extension": {
                        "type": "string",
                        "description": "The extension number of the Gong user.",
                        "example": "123"
                    },
                    "personalMeetingUrls": {
                        "type": "array",
                        "description": "The list of personal meeting URLs of the Gong user.",
                        "example": [
                            "https://zoom.us/j/123"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "settings": {
                        "$ref": "#/components/schemas/Settings",
                        "exampleSetFlag": false
                    },
                    "managerId": {
                        "type": "string",
                        "description": "The manager ID of the Gong user.",
                        "example": "563515258458745"
                    },
                    "meetingConsentPageUrl": {
                        "type": "string",
                        "description": "The Gong recording consent meeting link",
                        "example": "https://join.gong.io/my-company/jon.snow?tkn=MoNpS9tMNt8BK7EZxQpSJl"
                    },
                    "spokenLanguages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/spokenLanguage"
                        }
                    }
                },
                "description": "User's metadata."
            },
            "UsersMetadata": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "records": {
                        "$ref": "#/components/schemas/Records",
                        "exampleSetFlag": false
                    },
                    "users": {
                        "type": "array",
                        "description": "A list, in which each item specifies one user's metadata.",
                        "items": {
                            "$ref": "#/components/schemas/UserMetadata"
                        }
                    }
                }
            },
            "spokenLanguage": {
                "type": "object",
                "properties": {
                    "language": {
                        "type": "string",
                        "description": "Language spoken by the user encoded according to the BCP-47 standard.",
                        "example": "es-ES"
                    },
                    "primary": {
                        "type": "boolean",
                        "description": "Indicates the primary language (one per user). The language will be assumed when the system cannot identify the language of a call, e.g., due to poor quality or the call being too short.",
                        "example": true
                    }
                },
                "description": "Languages spoken during calls by the Gong user"
            },
            "MultipleUsersRequestWithCreationDates": {
                "type": "object",
                "properties": {
                    "createdFromDateTime": {
                        "type": "string",
                        "description": "An optional user creation time lower limit, if supplied the API will return only the users created at or after this time. The filed is in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).",
                        "example": "2018-02-17T02:30:00-08:00"
                    },
                    "createdToDateTime": {
                        "type": "string",
                        "description": "An optional user creation time upper limit, if supplied the API will return only the users created before this time. The filed is in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).",
                        "example": "2018-02-19T02:30:00-08:00"
                    },
                    "includeAvatars": {
                        "type": "boolean",
                        "description": "Avatars are synthetic users representing Gong employees (CSMs and support providers) when they access your instance. References to avatars' IDs may be found in the outputs of other API endpoints. This parameter is optional, if not provided avatars will not be included in the results.",
                        "example": false
                    },
                    "userIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Set of Gong's unique numeric identifiers for the users (up to 20 digits).",
                        "writeOnly": true,
                        "example": [
                            "234599484848423"
                        ],
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Filter parameters."
            },
            "PublicApiBaseRequestV2MultipleUsersRequestWithCreationDates": {
                "required": [
                    "filter"
                ],
                "type": "object",
                "properties": {
                    "cursor": {
                        "type": "string",
                        "description": "When paging is needed, provide the value supplied by the previous API call to bring the following page of records.",
                        "example": "eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM"
                    },
                    "filter": {
                        "$ref": "#/components/schemas/MultipleUsersRequestWithCreationDates",
                        "exampleSetFlag": false
                    }
                }
            },
            "CompanyUsersIntercationStatsResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "records": {
                        "$ref": "#/components/schemas/Records",
                        "exampleSetFlag": false
                    },
                    "peopleInteractionStats": {
                        "type": "array",
                        "description": "A list of interaction statistics. Applicable values: 'Longest Monologue', 'Longest Customer Story', 'Interactivity', 'Patience', 'Question Rate'.",
                        "items": {
                            "$ref": "#/components/schemas/InteractionStats"
                        }
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The company's defined timezone in Gong.",
                        "example": "US/Pacific"
                    },
                    "toDateTime": {
                        "type": "string",
                        "description": "The date and time in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC, when the list of results ends.",
                        "example": "2019-01-21T000:00:00-08:00"
                    },
                    "fromDateTime": {
                        "type": "string",
                        "description": "The date and time in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC, when the list of results starts.",
                        "example": "2019-01-20T00:00:00-08:00"
                    }
                }
            },
            "InteractionStat": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Stat name",
                        "example": "Interactivity"
                    },
                    "value": {
                        "type": "number",
                        "description": "Stat measurement (Can be either a double or integer)",
                        "format": "double",
                        "example": 9.23
                    }
                }
            },
            "InteractionStats": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the user (up to 20 digits).",
                        "example": "234599484848423"
                    },
                    "userEmailAddress": {
                        "type": "string",
                        "description": "The email address of the Gong user.",
                        "example": "test@test.com"
                    },
                    "personInteractionStats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InteractionStat"
                        }
                    }
                },
                "description": "A list of interaction statistics. Applicable values: 'Longest Monologue', 'Longest Customer Story', 'Interactivity', 'Patience', 'Question Rate'."
            },
            "MultipleUsersWithDates": {
                "required": [
                    "fromDate",
                    "toDate"
                ],
                "type": "object",
                "properties": {
                    "fromDate": {
                        "type": "string",
                        "description": "The date (in the company's time zone) from which to list a user's activity. This value is inclusive. The date should be specified in the following format: YYYY-MM-DD.",
                        "example": "2019-01-20"
                    },
                    "toDate": {
                        "type": "string",
                        "description": "The date (in the company's time zone) until which to list a user's activity. This value is exclusive. This value should not exceed the current day. The date should be specified in the following format: YYYY-MM-DD.",
                        "example": "2019-01-21"
                    },
                    "createdFromDateTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdToDateTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "userIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Set of Gong's unique numeric identifiers for the users (up to 20 digits).",
                        "writeOnly": true,
                        "example": [
                            "234599484848423"
                        ],
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Filter parameters."
            },
            "PublicApiBaseRequestV2MultipleUsersWithDates": {
                "required": [
                    "filter"
                ],
                "type": "object",
                "properties": {
                    "cursor": {
                        "type": "string",
                        "description": "When paging is needed, provide the value supplied by the previous API call to bring the following page of records.",
                        "example": "eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM"
                    },
                    "filter": {
                        "$ref": "#/components/schemas/MultipleUsersWithDates",
                        "exampleSetFlag": false
                    }
                }
            },
            "Answer": {
                "type": "object",
                "properties": {
                    "questionId": {
                        "type": "integer",
                        "description": "The identifier of the question.",
                        "format": "int64"
                    },
                    "questionRevisionId": {
                        "type": "integer",
                        "description": "The identifier of the revision version of the question.",
                        "format": "int64",
                        "example": 43955224753211112
                    },
                    "isOverall": {
                        "type": "boolean",
                        "description": "If the question is the main overall question or not.",
                        "example": true
                    },
                    "score": {
                        "type": "integer",
                        "description": "Score between 1 to 50, if answered. Null otherwise.",
                        "format": "int32",
                        "example": 4
                    },
                    "answerText": {
                        "type": "string",
                        "description": "The answer's text, if answered. Null otherwise.",
                        "example": "Done a great job. Scheduled a follow-up demo."
                    },
                    "notApplicable": {
                        "type": "boolean",
                        "description": "If the question is irrelevant for the call.",
                        "example": false
                    },
                    "selectedOptions": {
                        "type": "array",
                        "description": "The identifier of the options selected. Null otherwise",
                        "example": [
                            "1",
                            "3"
                        ],
                        "items": {
                            "type": "string",
                            "description": "The identifier of the options selected. Null otherwise",
                            "example": "[\"1\",\"3\"]"
                        }
                    }
                },
                "description": "The answers in the answered scorecard."
            },
            "AnsweredScorecard": {
                "type": "object",
                "properties": {
                    "answeredScorecardId": {
                        "type": "integer",
                        "description": "The identifier of the answer of the scorecard.",
                        "format": "int64",
                        "example": 563515258458745
                    },
                    "scorecardId": {
                        "type": "integer",
                        "description": "The identifier of the scorecard.",
                        "format": "int64",
                        "example": 6843152929075440037
                    },
                    "scorecardName": {
                        "type": "string",
                        "description": "Scorecard name.",
                        "example": "SDR Call Scorecard"
                    },
                    "callId": {
                        "type": "integer",
                        "description": "Gong's unique numeric identifier for the call (up to 20 digits).",
                        "format": "int64",
                        "example": 7782342274025937895
                    },
                    "callStartTime": {
                        "type": "string",
                        "description": "The date and time when the call was recorded in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.",
                        "format": "date-time",
                        "example": 1518863400.000000000
                    },
                    "reviewedUserId": {
                        "type": "integer",
                        "description": "The user Id of the team member being reviewed, who hosted the call.",
                        "format": "int64",
                        "example": 234599484848423
                    },
                    "reviewerUserId": {
                        "type": "integer",
                        "description": "The user Id of the team member who answered the scorecard for the call.",
                        "format": "int64",
                        "example": 563515258458745
                    },
                    "reviewTime": {
                        "type": "string",
                        "description": "The date and time when the review was completed and published in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.",
                        "format": "date-time",
                        "example": 1518863400.000000000
                    },
                    "visibilityType": {
                        "type": "string",
                        "enum": [
                            "PUBLIC",
                            "PRIVATE",
                            "OPT_IN_USERS"
                        ]
                    },
                    "answers": {
                        "type": "array",
                        "description": "The answers in the answered scorecard.",
                        "items": {
                            "$ref": "#/components/schemas/Answer"
                        }
                    }
                },
                "description": "A list, in which each item contains one answered scorecard."
            },
            "AnsweredScorecards": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "records": {
                        "$ref": "#/components/schemas/Records",
                        "exampleSetFlag": false
                    },
                    "answeredScorecards": {
                        "type": "array",
                        "description": "A list, in which each item contains one answered scorecard.",
                        "items": {
                            "$ref": "#/components/schemas/AnsweredScorecard"
                        }
                    }
                }
            },
            "AnsweredScorecardsFilter": {
                "type": "object",
                "properties": {
                    "callFromDate": {
                        "type": "string",
                        "description": "The date (in the company's time zone) of the call from when to list calls. This value is inclusive. The date should be specified in the following format: YYYY-MM-DD; if not specified, it starts with the earliest recorded call.",
                        "example": "2019-01-20"
                    },
                    "callToDate": {
                        "type": "string",
                        "description": "The date (in the company's time zone) of the call until when to list calls. This value is exclusive. The date should be specified in the following format: YYYY-MM-DD; if not specified, it ends with the latest recorded call.",
                        "example": "2019-01-25"
                    },
                    "reviewFromDate": {
                        "type": "string",
                        "description": "The review date (in the company's time zone) from when to list calls. This value is inclusive. The date should be specified in the following format: YYYY-MM-DD; if not specified, it starts with the earliest reviewed call.",
                        "example": "2019-01-20"
                    },
                    "reviewToDate": {
                        "type": "string",
                        "description": "The review date (in the company's time zone) until when to list calls. This value is exclusive. The date should be specified in the following format: YYYY-MM-DD; if not specified, it ends with the latest reviewed call.",
                        "example": "2019-01-25"
                    },
                    "reviewedUserIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of user Ids of the team members being reviewed. If not specified, it returns all answered scorecards in the corresponding filter.",
                        "writeOnly": true,
                        "example": [
                            "234599484848423"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "scorecardIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of scorecards Ids. If not specified, it returns all answered scorecards in the corresponding filter.",
                        "writeOnly": true,
                        "example": [
                            "6843152929075440037"
                        ],
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Filter parameters."
            },
            "PublicApiBaseRequestV2AnsweredScorecardsFilter": {
                "required": [
                    "filter"
                ],
                "type": "object",
                "properties": {
                    "cursor": {
                        "type": "string",
                        "description": "When paging is needed, provide the value supplied by the previous API call to bring the following page of records.",
                        "example": "eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM"
                    },
                    "filter": {
                        "$ref": "#/components/schemas/AnsweredScorecardsFilter",
                        "exampleSetFlag": false
                    }
                }
            },
            "DailyActivityWithDates": {
                "type": "object",
                "properties": {
                    "callsAsHost": {
                        "type": "array",
                        "description": "List of IDs of calls in which this user is the host.",
                        "example": [
                            348056639626337006
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "callsGaveFeedback": {
                        "type": "array",
                        "description": "List of IDs of calls where the user gave feedback.",
                        "example": [
                            5580564522626337006
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "callsRequestedFeedback": {
                        "type": "array",
                        "description": " List of IDs of calls where the user requested feedback.",
                        "example": [
                            342556337006
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "callsReceivedFeedback": {
                        "type": "array",
                        "description": " List of IDs of calls where the user received feedback.",
                        "example": [
                            342556337006
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "ownCallsListenedTo": {
                        "type": "array",
                        "description": "List of IDs of the user's own calls, that the user listened to.",
                        "example": [
                            4553256639626337006
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "othersCallsListenedTo": {
                        "type": "array",
                        "description": "List of IDs of calls, not belonging to this user, that the user listened to.",
                        "example": [
                            56305663962633755
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "callsSharedInternally": {
                        "type": "array",
                        "description": "List of IDs of calls the user shared with other users inside the company.",
                        "example": [
                            37555663966526337006
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "callsSharedExternally": {
                        "type": "array",
                        "description": "List of IDs of calls the user shared with people outside the company.",
                        "example": [
                            4563962633756
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "callsAttended": {
                        "type": "array",
                        "description": "List of IDs of calls in which this user is participant (not host)",
                        "example": [
                            45783962636582
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "callsCommentsGiven": {
                        "type": "array",
                        "description": "List of IDs of calls in which a user gave at least one comment.",
                        "example": [
                            45663345636581
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "callsCommentsReceived": {
                        "type": "array",
                        "description": "List of IDs of calls in which a user received at least one comment on the users calls.",
                        "example": [
                            45663962636582
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "callsMarkedAsFeedbackGiven": {
                        "type": "array",
                        "description": " List of IDs of calls in which someone pressed the \"Mark as reviewed\".",
                        "example": [
                            45663962636581
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "callsMarkedAsFeedbackReceived": {
                        "type": "array",
                        "description": "List of IDs of calls in which someone pressed the \"Mark as reviewed\" on the users calls.",
                        "example": [
                            45663388836581
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "callsScorecardsFilled": {
                        "type": "array",
                        "description": "List of IDs of calls in which the user filled scorecards.",
                        "example": [
                            45663962636582
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "callsScorecardsReceived": {
                        "type": "array",
                        "description": "List of IDs of calls in which someone filled a scorecard on the users calls.",
                        "example": [
                            45663962636581
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "fromDate": {
                        "type": "string",
                        "description": "The start of the day in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.",
                        "example": "2019-01-20T00:00:00-08:00"
                    },
                    "toDate": {
                        "type": "string",
                        "description": "The end of the day in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.",
                        "example": "2019-01-21T000:00:00-08:00"
                    }
                },
                "description": "User daily activity"
            },
            "UserDayByDayActivity": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the user (up to 20 digits)."
                    },
                    "userEmailAddress": {
                        "type": "string",
                        "description": "The email address of the Gong user."
                    },
                    "userDailyActivityStats": {
                        "type": "array",
                        "description": "Array of daily activity records, one for every day in the date range.",
                        "items": {
                            "$ref": "#/components/schemas/DailyActivityWithDates"
                        }
                    }
                },
                "description": "A list, in which each item contains one user's activity."
            },
            "UsersDayByDayActivity": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "records": {
                        "$ref": "#/components/schemas/Records",
                        "exampleSetFlag": false
                    },
                    "usersDetailedActivities": {
                        "type": "array",
                        "description": "A list, in which each item contains one user's activity.",
                        "items": {
                            "$ref": "#/components/schemas/UserDayByDayActivity"
                        }
                    }
                }
            },
            "AggregateActivity": {
                "type": "object",
                "properties": {
                    "callsAsHost": {
                        "type": "integer",
                        "description": "The number of recorded calls this user hosted.",
                        "format": "int32",
                        "example": 20
                    },
                    "callsGaveFeedback": {
                        "type": "integer",
                        "description": "The number of recorded calls the user gave feedback on.",
                        "format": "int32",
                        "example": 35
                    },
                    "callsRequestedFeedback": {
                        "type": "integer",
                        "description": "The number of recorded calls the user requested feedback on.",
                        "format": "int32",
                        "example": 77
                    },
                    "callsReceivedFeedback": {
                        "type": "integer",
                        "description": "The number of recorded calls the user received feedback on.",
                        "format": "int32",
                        "example": 67
                    },
                    "ownCallsListenedTo": {
                        "type": "integer",
                        "description": "The number of the user's own calls the user listened to.",
                        "format": "int32",
                        "example": 668
                    },
                    "othersCallsListenedTo": {
                        "type": "integer",
                        "description": "The number of other users' calls the user listened to.",
                        "format": "int32",
                        "example": 96
                    },
                    "callsSharedInternally": {
                        "type": "integer",
                        "description": "The number of calls the user shared with others inside the company.",
                        "format": "int32",
                        "example": 478
                    },
                    "callsSharedExternally": {
                        "type": "integer",
                        "description": "The number of calls the user shared with others outside the company.",
                        "format": "int32",
                        "example": 75
                    },
                    "callsScorecardsFilled": {
                        "type": "integer",
                        "description": "The number of scorecards the user completed.",
                        "format": "int32",
                        "example": 876
                    },
                    "callsScorecardsReceived": {
                        "type": "integer",
                        "description": "The number of calls in which someone filled a scorecard on the user's calls.",
                        "format": "int32",
                        "example": 876
                    },
                    "callsAttended": {
                        "type": "integer",
                        "description": "The number of calls in which this user is participant (not host).",
                        "format": "int32",
                        "example": 46
                    },
                    "callsCommentsGiven": {
                        "type": "integer",
                        "description": "The number of calls in which a user gave at least one comment.",
                        "format": "int32",
                        "example": 21
                    },
                    "callsCommentsReceived": {
                        "type": "integer",
                        "description": "The number of calls in which a user received at least one comment on the users calls.",
                        "format": "int32",
                        "example": 13
                    },
                    "callsMarkedAsFeedbackGiven": {
                        "type": "integer",
                        "description": "The number of calls in which someone pressed the \"Mark as reviewed\".",
                        "format": "int32",
                        "example": 24
                    },
                    "callsMarkedAsFeedbackReceived": {
                        "type": "integer",
                        "description": "The number of calls in which someone pressed the “Mark as reviewed” on the users calls.",
                        "format": "int32",
                        "example": 35
                    }
                },
                "description": "Aggregated activity for a user within a time period"
            },
            "CompanyUsersAggregateActivityResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "records": {
                        "$ref": "#/components/schemas/Records",
                        "exampleSetFlag": false
                    },
                    "usersAggregateActivityStats": {
                        "type": "array",
                        "description": "A list, in which each item specifies one user's activities.",
                        "items": {
                            "$ref": "#/components/schemas/UserActivity"
                        }
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The company's defined timezone in Gong.",
                        "example": "US/Pacific"
                    },
                    "toDateTime": {
                        "type": "string",
                        "description": "The date and time in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC, when the list of results ends.",
                        "example": "2019-01-21T000:00:00-08:00"
                    },
                    "fromDateTime": {
                        "type": "string",
                        "description": "The date and time in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC, when the list of results starts.",
                        "example": "2019-01-20T00:00:00-08:00"
                    }
                }
            },
            "UserActivity": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the user (up to 20 digits).",
                        "example": "234599484848423"
                    },
                    "userEmailAddress": {
                        "type": "string",
                        "description": "The email address of the Gong user.",
                        "example": "test@test.com"
                    },
                    "userAggregateActivityStats": {
                        "$ref": "#/components/schemas/AggregateActivity",
                        "exampleSetFlag": false
                    }
                },
                "description": "A list, in which each item specifies one user's activities."
            },
            "AggregateActivityWithDates": {
                "type": "object",
                "properties": {
                    "callsAsHost": {
                        "type": "integer",
                        "description": "The number of recorded calls this user hosted.",
                        "format": "int32",
                        "example": 20
                    },
                    "callsGaveFeedback": {
                        "type": "integer",
                        "description": "The number of recorded calls the user gave feedback on.",
                        "format": "int32",
                        "example": 35
                    },
                    "callsRequestedFeedback": {
                        "type": "integer",
                        "description": "The number of recorded calls the user requested feedback on.",
                        "format": "int32",
                        "example": 77
                    },
                    "callsReceivedFeedback": {
                        "type": "integer",
                        "description": "The number of recorded calls the user received feedback on.",
                        "format": "int32",
                        "example": 67
                    },
                    "ownCallsListenedTo": {
                        "type": "integer",
                        "description": "The number of the user's own calls the user listened to.",
                        "format": "int32",
                        "example": 668
                    },
                    "othersCallsListenedTo": {
                        "type": "integer",
                        "description": "The number of other users' calls the user listened to.",
                        "format": "int32",
                        "example": 96
                    },
                    "callsSharedInternally": {
                        "type": "integer",
                        "description": "The number of calls the user shared with others inside the company.",
                        "format": "int32",
                        "example": 478
                    },
                    "callsSharedExternally": {
                        "type": "integer",
                        "description": "The number of calls the user shared with others outside the company.",
                        "format": "int32",
                        "example": 75
                    },
                    "callsScorecardsFilled": {
                        "type": "integer",
                        "description": "The number of scorecards the user completed.",
                        "format": "int32",
                        "example": 876
                    },
                    "callsScorecardsReceived": {
                        "type": "integer",
                        "description": "The number of calls in which someone filled a scorecard on the user's calls.",
                        "format": "int32",
                        "example": 876
                    },
                    "callsAttended": {
                        "type": "integer",
                        "description": "The number of calls in which this user is participant (not host).",
                        "format": "int32",
                        "example": 46
                    },
                    "callsCommentsGiven": {
                        "type": "integer",
                        "description": "The number of calls in which a user gave at least one comment.",
                        "format": "int32",
                        "example": 21
                    },
                    "callsCommentsReceived": {
                        "type": "integer",
                        "description": "The number of calls in which a user received at least one comment on the users calls.",
                        "format": "int32",
                        "example": 13
                    },
                    "callsMarkedAsFeedbackGiven": {
                        "type": "integer",
                        "description": "The number of calls in which someone pressed the \"Mark as reviewed\".",
                        "format": "int32",
                        "example": 24
                    },
                    "callsMarkedAsFeedbackReceived": {
                        "type": "integer",
                        "description": "The number of calls in which someone pressed the “Mark as reviewed” on the users calls.",
                        "format": "int32",
                        "example": 35
                    },
                    "fromDate": {
                        "type": "string",
                        "description": "The start of the period, or the request filter's fromDate for the first period in the range, in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.",
                        "example": "2019-01-20T00:00:00-08:00"
                    },
                    "toDate": {
                        "type": "string",
                        "description": "The end of the period, or the request filter's toDate for the last period in the range,  in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.",
                        "example": "2019-01-21T000:00:00-08:00"
                    }
                },
                "description": "Aggregated activity for a user within a time period"
            },
            "UserAggregateByPeriodActivities": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the user (up to 20 digits).",
                        "example": "234599484848423"
                    },
                    "userEmailAddress": {
                        "type": "string",
                        "description": "The email address of the Gong user.",
                        "example": "test@test.com"
                    },
                    "userAggregateActivity": {
                        "type": "array",
                        "description": "A list, in which each item contains aggregate user activity for consecutive time periods in the date range.",
                        "items": {
                            "$ref": "#/components/schemas/AggregateActivityWithDates"
                        }
                    }
                },
                "description": "A list, in which each item contains details of one user's activities."
            },
            "UsersAggregateByPeriodActivity": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "records": {
                        "$ref": "#/components/schemas/Records",
                        "exampleSetFlag": false
                    },
                    "usersAggregateActivity": {
                        "type": "array",
                        "description": "A list, in which each item contains details of one user's activities.",
                        "items": {
                            "$ref": "#/components/schemas/UserAggregateByPeriodActivities"
                        }
                    }
                }
            },
            "RequestWithTimePeriod": {
                "required": [
                    "aggregationPeriod",
                    "filter"
                ],
                "type": "object",
                "properties": {
                    "cursor": {
                        "type": "string",
                        "description": "When paging is needed, provide the value supplied by the previous API call to bring the following page of records.",
                        "example": "eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM"
                    },
                    "filter": {
                        "$ref": "#/components/schemas/MultipleUsersWithDates",
                        "exampleSetFlag": false
                    },
                    "aggregationPeriod": {
                        "type": "string",
                        "description": "Calendar time period for aggregating data. Note: First day of the week is Monday.",
                        "example": "DAY",
                        "enum": [
                            "DAY",
                            "WEEK",
                            "MONTH",
                            "QUARTER",
                            "YEAR"
                        ]
                    }
                }
            },
            "NewMeetingResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "meetingId": {
                        "type": "string",
                        "description": "Gong's unique identifier for the meeting (up to 20 digits).",
                        "example": "7782342274025937895"
                    },
                    "meetingUrl": {
                        "type": "string",
                        "description": "The Gong URL of the meeting, should be used to enter the meeting.",
                        "example": "https://join.gong.io/my-company/jon.snow?tkn=MoNpS9tMNt8BK7EZxQpSJl"
                    },
                    "additionalInvitees": {
                        "type": "array",
                        "description": "Attendees the requesting party should add to the invitation, this should support adding email addresses such as coordinator@gong.io for Gong to schedule the recording of the meeting.",
                        "example": [
                            {
                                "displayName": "Gong Assistant",
                                "email": "assistant@gong.io"
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/MeetingInvitee"
                        }
                    }
                }
            },
            "NewMeetingRequest": {
                "required": [
                    "endTime",
                    "invitees",
                    "organizerEmail",
                    "startTime"
                ],
                "type": "object",
                "properties": {
                    "startTime": {
                        "type": "string",
                        "description": "The meeting start time in ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).",
                        "example": "2018-02-17T02:30:00-08:00"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "The meeting end time in ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).",
                        "example": "2018-02-19T02:30:00-08:00"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the event.",
                        "example": "Example call"
                    },
                    "invitees": {
                        "type": "array",
                        "description": "A list of email addresses of invitees to the event (not including the organizer).",
                        "example": [
                            {
                                "displayName": "Cookie Monster",
                                "email": "cookie.monster@cookies.com"
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/MeetingInvitee"
                        }
                    },
                    "externalId": {
                        "type": "string",
                        "description": "The ID as it is formed on the external system.",
                        "example": "7JEHFRGXDDZFEW2FC4U"
                    },
                    "organizerEmail": {
                        "type": "string",
                        "description": "The email address of the user creating the meeting, the Gong consent page link will be used according to the settings of this user.",
                        "example": "test@test.com"
                    }
                },
                "description": "New meeting metadata"
            },
            "IntegrationStatusResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "users": {
                        "type": "array",
                        "description": "The integration status for the request users",
                        "items": {
                            "$ref": "#/components/schemas/User Integration Status"
                        }
                    }
                }
            },
            "User Integration Status": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address meeting organizer",
                        "example": "test@test.com"
                    },
                    "exists": {
                        "type": "boolean",
                        "description": "Whether the user exists in Gong",
                        "example": true
                    },
                    "valid": {
                        "type": "boolean",
                        "description": "Whether the integration is connected for the user",
                        "example": false
                    },
                    "userFacingError": {
                        "type": "string",
                        "description": "The message explaining in case the integration is currently not connected",
                        "example": "The Gong consent page is not enabled in your company. Contact your Gong Admin."
                    },
                    "fixUrl": {
                        "type": "string",
                        "description": "A URL to place in the application to fix the problem",
                        "example": "https://app.gong.io/company/recording-consent/consent-page"
                    },
                    "helpUrl": {
                        "type": "string",
                        "description": "A URL to the Gong help center where more information can be found about the error",
                        "example": "https://help.gong.io/hc/en-us/articles/360056677792"
                    }
                },
                "description": "The integration status for the request users"
            },
            "IntegrationStatusRequest": {
                "type": "object",
                "properties": {
                    "emails": {
                        "type": "array",
                        "description": "String array of emails of users (max 100)",
                        "items": {
                            "type": "string",
                            "description": "String array of emails of users (max 100)"
                        }
                    }
                }
            },
            "IntegrationSettingsRequest": {
                "required": [
                    "integrationTypeSettings"
                ],
                "type": "object",
                "properties": {
                    "integrationTypeSettings": {
                        "type": "array",
                        "description": "Set a list of dynamic origins for a company",
                        "items": {
                            "$ref": "#/components/schemas/IntegrationTypeSettings"
                        }
                    }
                },
                "description": "Integration settings metadata"
            },
            "IntegrationTypeSettings": {
                "required": [
                    "allowedOrigin",
                    "integrationType"
                ],
                "type": "object",
                "properties": {
                    "integrationType": {
                        "type": "string",
                        "description": "The integration type in Gong",
                        "enum": [
                            "EMAIL_COMPOSER",
                            "ACCOUNT_PAGES",
                            "DIALER"
                        ]
                    },
                    "allowedOrigin": {
                        "type": "string",
                        "description": "A valid origin that can be used as the iFrame source. Use this to add tenant sub domains as valid for the integration. For example, if you create dynamic domains for your customers eg https://acme.partner.com"
                    }
                },
                "description": "Set a list of dynamic origins for a company"
            },
            "ProspectsFlowsResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "prospectsAssigned": {
                        "type": "array",
                        "description": "The flow instances assigned to the given prospects",
                        "items": {
                            "$ref": "#/components/schemas/PublicApiAssignedFlow"
                        }
                    }
                }
            },
            "PublicApiAssignedFlow": {
                "type": "object",
                "properties": {
                    "flowId": {
                        "type": "string",
                        "description": "The Gong Engage Flow ID the prospect was assigned to.",
                        "example": "1695493301223590792"
                    },
                    "flowName": {
                        "type": "string",
                        "description": "The Gong Engage Flow name the prospect was assigned to.",
                        "example": "SDR Flow"
                    },
                    "crmProspectId": {
                        "type": "string",
                        "description": "The CRM ID of the prospect that was assigned to a Gong Engage flow.",
                        "example": "a5V1Q00A120DP4CVAW"
                    },
                    "flowInstanceId": {
                        "type": "string",
                        "description": "The newly created flow instance id.",
                        "example": "1234361284629356"
                    },
                    "flowInstanceOwnerEmail": {
                        "type": "string",
                        "description": "The email address of the Gong user who owns the flow instance tasks.",
                        "example": "test@test.com"
                    },
                    "flowInstanceOwnerFullName": {
                        "type": "string",
                        "description": "The full name of the Gong user who owns the flow instance tasks.\n",
                        "example": "Test User"
                    },
                    "flowInstanceCreateDate": {
                        "type": "string",
                        "description": "The creation date of the flow instance in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.",
                        "example": "2019-01-20T00:00:00-08:00"
                    },
                    "flowInstanceStatus": {
                        "type": "string",
                        "description": "The status of the flow instance.",
                        "example": "Running",
                        "enum": [
                            "Running",
                            "Pending",
                            "Paused"
                        ]
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "The workspace ID this flow belongs to.",
                        "example": "623457276584334"
                    },
                    "exclusive": {
                        "type": "boolean",
                        "description": "Indicates whether a prospect in this flow can be added to other flows",
                        "example": true
                    }
                }
            },
            "ProspectsAssignedFlowsRequestV2": {
                "required": [
                    "crmProspectsIds"
                ],
                "type": "object",
                "properties": {
                    "crmProspectsIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The CRM IDs of the prospects to list assigned flows for",
                        "example": [
                            "a5V1Q00A120DP4CVAW"
                        ],
                        "items": {
                            "type": "string",
                            "description": "The CRM IDs of the prospects to list assigned flows for",
                            "example": "[\"a5V1Q00A120DP4CVAW\"]"
                        }
                    }
                },
                "description": "Prospects assigned flows request"
            },
            "AssignFlowResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "prospectsAssigned": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublicApiAssignedFlow"
                        }
                    },
                    "prospectsNotAssigned": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AssignedFlowFailure"
                        }
                    }
                }
            },
            "AssignedFlowFailure": {
                "type": "object",
                "properties": {
                    "flowId": {
                        "type": "string",
                        "description": "The flow ID to which the assignment failed",
                        "example": "1695493301223590792"
                    },
                    "crmProspectId": {
                        "type": "string",
                        "description": "The CRM ID of the prospect that failed to get assigned to a Gong Engage flow.",
                        "example": "a5V1Q00A120DP4CVAW"
                    },
                    "errorCode": {
                        "type": "string",
                        "description": "The code of the assignment error",
                        "example": "InvalidArgument",
                        "enum": [
                            "InvalidArgument",
                            "InvalidState",
                            "UnexpectedError"
                        ]
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "A message describing the assignment error",
                        "example": "Invalid crmId <not-a-crm-id>"
                    }
                }
            },
            "AssignFlowRequestV2": {
                "required": [
                    "crmProspectsIds",
                    "flowId",
                    "flowInstanceOwnerEmail"
                ],
                "type": "object",
                "properties": {
                    "crmProspectsIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "The CRM IDs of the contact or lead that should be assigned to a flow",
                        "example": [
                            "a5V1Q00A120DP4CVAW"
                        ],
                        "items": {
                            "type": "string",
                            "description": "The CRM IDs of the contact or lead that should be assigned to a flow",
                            "example": "[\"a5V1Q00A120DP4CVAW\"]"
                        }
                    },
                    "flowId": {
                        "type": "string",
                        "description": "The Engage Flow ID to assign the contacts to.",
                        "example": "1695493301223590792"
                    },
                    "flowInstanceOwnerEmail": {
                        "type": "string",
                        "description": "The email of the Gong user who owns the flow to-dos.",
                        "example": "test@test.com"
                    }
                },
                "description": "Flow assignment parameters."
            },
            "EventAcceptedResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    }
                }
            },
            "Company": {
                "type": "object",
                "properties": {
                    "companyId": {
                        "type": "string",
                        "description": "The company ID in the partner's source system"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the company"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of the person's company. Used to associate the person with the company (\"acme.com\"). Mandatory for anonymous person, when the name, email, phoneNumber and personBusinessContext are empty"
                    },
                    "companyBusinessContexts": {
                        "type": "array",
                        "description": "The company's details in an external system such as the CRM. If the domain is empty, to enable association, send the crmAccountId or crmOpportunityId",
                        "items": {
                            "$ref": "#/components/schemas/CompanyBusinessContext"
                        }
                    }
                },
                "description": "The company the person works in. Should include at least one of the following: domain, crmAccountId, crmOpportunityId (via the companyBusinessContext object)"
            },
            "CompanyBusinessContext": {
                "required": [
                    "objectId",
                    "objectType"
                ],
                "type": "object",
                "properties": {
                    "objectType": {
                        "type": "string",
                        "description": "The object type in the external system",
                        "enum": [
                            "ACCOUNT",
                            "OPPORTUNITY"
                        ]
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The ID of the business context object"
                    },
                    "systemName": {
                        "type": "string",
                        "description": "The name of the external system"
                    }
                },
                "description": "The company's details in an external system such as the CRM. If the domain is empty, to enable association, send the crmAccountId or crmOpportunityId"
            },
            "Content": {
                "required": [
                    "contentTitle"
                ],
                "type": "object",
                "properties": {
                    "contentId": {
                        "type": "string",
                        "description": "A unique identifier for the content in the partner's system"
                    },
                    "contentTitle": {
                        "type": "string",
                        "description": "The title of the content"
                    },
                    "contentLabel": {
                        "type": "array",
                        "description": "A list of tags defined for the content",
                        "items": {
                            "type": "string",
                            "description": "A list of tags defined for the content"
                        }
                    },
                    "contentUrl": {
                        "type": "string",
                        "description": "The URL for the content the person looked at"
                    },
                    "contentAdditionalInfoUrl": {
                        "type": "string",
                        "description": "The URL for additional details provided by the website or external app, such as analysis of the content viewed"
                    },
                    "numericContentDetails": {
                        "$ref": "#/components/schemas/NumericContentDetails",
                        "exampleSetFlag": false
                    },
                    "stepContentDetails": {
                        "$ref": "#/components/schemas/StepContentDetails",
                        "exampleSetFlag": false
                    },
                    "searchObjectDetails": {
                        "$ref": "#/components/schemas/SearchObjectDetails",
                        "exampleSetFlag": false
                    },
                    "contentCustomFields": {
                        "type": "array",
                        "description": "Include additional custom data about the content",
                        "items": {
                            "$ref": "#/components/schemas/CustomField"
                        }
                    }
                },
                "description": "The content the person looked at"
            },
            "CustomField": {
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the custom field"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the custom field"
                    },
                    "dataType": {
                        "type": "string",
                        "description": "The data type of the custom field: NUMBER, STRING, DATE (ISO 8601), URL, DURATION (in Seconds). Default value: STRING",
                        "enum": [
                            "STRING",
                            "NUMBER",
                            "DATE",
                            "URL",
                            "BOOLEAN",
                            "DURATION"
                        ]
                    }
                },
                "description": "Include additional custom data about the event"
            },
            "DigitalInteractionRequest": {
                "required": [
                    "content",
                    "eventId",
                    "eventType",
                    "person",
                    "timestamp"
                ],
                "type": "object",
                "properties": {
                    "eventId": {
                        "type": "string",
                        "description": "The provider's unique identifier for the event used for deduplication"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "The date and time of the event in ISO 8601 format",
                        "format": "date-time"
                    },
                    "eventType": {
                        "type": "string",
                        "description": "The type of the event, explaining the content and action performed. Values may be partner-aligned, for example, \"link clicked\", \"page viewed\""
                    },
                    "sourceSystemName": {
                        "type": "string",
                        "description": "When integrating via IPaaS, the name of the technology partner the customer set up a Gong integration with via an IPaaS. When integrating directly with Gong: the name of the company setting up the integration with Gong"
                    },
                    "sessionId": {
                        "type": "string",
                        "description": "The identifier for the session, useful for tying related events together"
                    },
                    "device": {
                        "type": "string",
                        "description": "The device used during the event",
                        "enum": [
                            "MOBILE",
                            "PC"
                        ]
                    },
                    "content": {
                        "$ref": "#/components/schemas/Content",
                        "exampleSetFlag": false
                    },
                    "person": {
                        "$ref": "#/components/schemas/Person",
                        "exampleSetFlag": false
                    },
                    "customFields": {
                        "type": "array",
                        "description": "Include additional custom data about the event",
                        "items": {
                            "$ref": "#/components/schemas/CustomField"
                        }
                    }
                },
                "description": "Digital interaction metadata"
            },
            "Location": {
                "type": "object",
                "properties": {
                    "country": {
                        "type": "string",
                        "description": "The country of the person in ISO 3166. If not available in ISO 3166, then send as string"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the person in ISO 3166-2. If not available in ISO 3166-2, then send as string"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the person in ISO 3166-2. If not available in ISO 3166-2, then send as string"
                    },
                    "city": {
                        "type": "string",
                        "description": "The city of the person"
                    }
                },
                "description": "The location of the person as identified in the partner's source system"
            },
            "NumericContentDetails": {
                "required": [
                    "rangeFrom",
                    "rangeTo"
                ],
                "type": "object",
                "properties": {
                    "value": {
                        "type": "integer",
                        "description": "The numeric value for the content",
                        "format": "int32"
                    },
                    "rangeFrom": {
                        "type": "integer",
                        "description": "The lowest value that can be given to the content",
                        "format": "int32"
                    },
                    "rangeTo": {
                        "type": "integer",
                        "description": "The highest value that can be given to the content",
                        "format": "int32"
                    },
                    "numericType": {
                        "type": "string",
                        "description": "The type of numeric value",
                        "enum": [
                            "PERCENTAGE",
                            "NPS",
                            "RATING",
                            "OTHER"
                        ]
                    }
                },
                "description": "For content where there is a numeric result, such as NPS score, or metrics such as the percentage of video watched"
            },
            "Person": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the person"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the person. Used for business context association"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number of the person. Used for business context association"
                    },
                    "personId": {
                        "type": "string",
                        "description": "A unique person identifier in the partner system. Mandatory for anonymous person, when the name, email, phoneNumber and personBusinessContext are empty"
                    },
                    "personBusinessContext": {
                        "$ref": "#/components/schemas/PersonBusinessContext",
                        "exampleSetFlag": false
                    },
                    "location": {
                        "$ref": "#/components/schemas/Location",
                        "exampleSetFlag": false
                    },
                    "company": {
                        "$ref": "#/components/schemas/Company",
                        "exampleSetFlag": false
                    },
                    "personCustomFields": {
                        "type": "array",
                        "description": "Include additional custom data about the person",
                        "items": {
                            "$ref": "#/components/schemas/CustomField"
                        }
                    }
                },
                "description": "The person who did the event"
            },
            "PersonBusinessContext": {
                "required": [
                    "objectId",
                    "objectType"
                ],
                "type": "object",
                "properties": {
                    "objectType": {
                        "type": "string",
                        "description": "The object type in the external system",
                        "enum": [
                            "CONTACT",
                            "LEAD"
                        ]
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The ID of the object in the external system"
                    },
                    "systemName": {
                        "type": "string",
                        "description": "The name of the external system"
                    }
                },
                "description": "The person's details in an external system such as the CRM"
            },
            "SearchObjectDetails": {
                "required": [
                    "domain",
                    "name",
                    "objectType"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the entity the person searched for"
                    },
                    "objectType": {
                        "type": "string",
                        "description": "The type of the entity the person searched for",
                        "enum": [
                            "VENDOR",
                            "PRODUCT",
                            "CATEGORY"
                        ]
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of the entity"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The ID of the entity in the partner system"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the entity in the partner system"
                    }
                },
                "description": "The objects returned when searching for different content. For example, the companies or products being compared with one another, or 2nd party intent"
            },
            "StepContentDetails": {
                "required": [
                    "availableSteps",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string",
                        "description": "The current step the person is in, in the process"
                    },
                    "availableSteps": {
                        "type": "array",
                        "description": "A list of all available steps in the process",
                        "items": {
                            "type": "string",
                            "description": "A list of all available steps in the process"
                        }
                    }
                },
                "description": "For content where there are a number of steps to complete in the content, such as shipment tracking or course advancement"
            },
            "SchemaUpdateResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    }
                }
            },
            "GenericSchemaFieldRequest": {
                "required": [
                    "label",
                    "type",
                    "uniqueName"
                ],
                "type": "object",
                "properties": {
                    "uniqueName": {
                        "type": "string",
                        "description": "The unique name of the field in the CRM system",
                        "example": "accountowner"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label to use in the UI for this field",
                        "example": "Account Owner"
                    },
                    "type": {
                        "type": "string",
                        "description": "The field type (case-sensitive). Must be one of the types listed above.",
                        "example": "REFERENCE",
                        "enum": [
                            "DATE",
                            "DATETIME",
                            "NUMBER",
                            "PERCENT",
                            "CURRENCY",
                            "ID",
                            "URL",
                            "STRING",
                            "BOOLEAN",
                            "PHONENUMBER",
                            "EMAILADDRESS",
                            "PICKLIST",
                            "REFERENCE",
                            "STRINGARRAY"
                        ]
                    },
                    "lastModified": {
                        "type": "string",
                        "description": "The date and time the schema was last modified. <br>Valid format: ISO-8601 format without milliseconds e.g., \"2020-12-17T13:45:01Z\"",
                        "example": "2020-12-17T13:45:01Z"
                    },
                    "isDeleted": {
                        "type": "boolean",
                        "description": "When true, deletes the field from the schema and its value is removed from all objects. Use with caution",
                        "example": false
                    },
                    "referenceTo": {
                        "type": "string",
                        "description": "The object type this field refers to. Required for field of type REFERENCE. Must be one of \"ACCOUNT\", \"CONTACT\", \"DEAL\", \"LEAD\" or \"USER\"",
                        "example": "USER"
                    },
                    "orderedValueList": {
                        "type": "array",
                        "description": "The list of values for the field. Required for PICKLIST fields",
                        "example": [
                            "Analyst",
                            "Competitor",
                            "Customer",
                            "Integrator",
                            "Investor",
                            "Partner",
                            "Other"
                        ],
                        "items": {
                            "type": "string",
                            "description": "The list of values for the field. Required for PICKLIST fields",
                            "example": "[\"Analyst\",\"Competitor\",\"Customer\",\"Integrator\",\"Investor\",\"Partner\",\"Other\"]"
                        }
                    }
                },
                "description": "selectedFields"
            },
            "AsyncProcessingResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "clientRequestId": {
                        "type": "string",
                        "description": "The clientRequestId sent in the request - used to monitor the request process",
                        "example": "clientRequest1"
                    }
                }
            },
            "NewCallAddingResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "callId": {
                        "type": "string",
                        "description": "New call ID",
                        "example": "7782342274025937895"
                    }
                }
            },
            "CallParticipant": {
                "type": "object",
                "properties": {
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number of the party, if available.",
                        "example": "+1 123-567-8989"
                    },
                    "emailAddress": {
                        "type": "string",
                        "description": "The email address of the party, if available.",
                        "example": "test@test.com"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the party, if available.",
                        "example": "Test User"
                    },
                    "partyId": {
                        "type": "string",
                        "description": "An identifier that is only required when speakersTimeline is provided.\n The partyId is used to recognize the speakers within the provided speakersTimeline.",
                        "example": "1"
                    },
                    "mediaChannelId": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "integer",
                        "description": "The audio channel corresponding to the company team member (rep) used when the uploaded media file is multi-channel (stereo). The channel id is either 0 or 1 (representing left or right respectively)",
                        "format": "int32",
                        "example": 0
                    },
                    "context": {
                        "type": "array",
                        "description": "A list of links to external systems such as CRM, Telephony System, Case Management, etc.",
                        "items": {
                            "$ref": "#/components/schemas/PartyUploadContext"
                        }
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID of the participant within the Gong system, if the participant is a user.",
                        "example": "234599484848423"
                    }
                },
                "description": "A list of the call's participants. A party must be provided for the primaryUser."
            },
            "NewCallAddingRequest": {
                "required": [
                    "actualStart",
                    "clientUniqueId",
                    "direction",
                    "parties",
                    "primaryUser"
                ],
                "type": "object",
                "properties": {
                    "clientUniqueId": {
                        "maxLength": 2048,
                        "minLength": 0,
                        "type": "string",
                        "description": "A call's unique identifier in the PBX or the recording system. Gong uses this identifier to prevent repeated attempts to upload the same recording.",
                        "example": "123abc"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the call. This title is available in the Gong system for indexing and search.",
                        "example": "Example call"
                    },
                    "purpose": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string",
                        "description": "The purpose of the call. This optional field is a free text of up to 255 characters.",
                        "example": "Demo Call"
                    },
                    "scheduledStart": {
                        "type": "string",
                        "description": "The date and time the call was scheduled to begin in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC);",
                        "example": "2018-02-17T02:30:00-08:00"
                    },
                    "scheduledEnd": {
                        "type": "string",
                        "description": "The date and time the call was scheduled to end in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC);",
                        "example": "2018-02-19T02:30:00-08:00"
                    },
                    "actualStart": {
                        "type": "string",
                        "description": "The actual date and time when the call started in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC);",
                        "example": "2018-02-17T02:30:00-08:00"
                    },
                    "duration": {
                        "type": "number",
                        "description": "The actual call duration in seconds.",
                        "format": "float",
                        "example": 125.8
                    },
                    "parties": {
                        "maxItems": 2147483647,
                        "minItems": 1,
                        "type": "array",
                        "description": "A list of the call's participants. A party must be provided for the primaryUser.",
                        "items": {
                            "$ref": "#/components/schemas/CallParticipant"
                        }
                    },
                    "direction": {
                        "type": "string",
                        "description": "Whether the call is inbound (someone called the company), outbound (a rep dialed someone outside the company), or a conference call.",
                        "enum": [
                            "Inbound",
                            "Outbound",
                            "Conference",
                            "Unknown"
                        ]
                    },
                    "disposition": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string",
                        "description": "The disposition of the call. The disposition is free text of up to 255 characters.",
                        "example": "No Answer"
                    },
                    "context": {
                        "type": "array",
                        "description": "A list of references to external systems such as CRM, Telephony System, Case Management, etc.",
                        "items": {
                            "$ref": "#/components/schemas/CallUploadContext"
                        }
                    },
                    "customData": {
                        "type": "string",
                        "description": "Optional metadata associated with the call (represented as text). Gong stores this metadata and it can be used for troubleshooting.",
                        "example": "Optional data"
                    },
                    "speakersTimeline": {
                        "$ref": "#/components/schemas/SpeakersTimeline",
                        "exampleSetFlag": false
                    },
                    "meetingUrl": {
                        "type": "string",
                        "description": "The URL of the conference call by which users join the meeting",
                        "example": "https://www.conference.com/john.smith"
                    },
                    "callProviderCode": {
                        "type": "string",
                        "description": "The code identifies the provider conferencing or telephony system. For example: zoom, clearslide, gotomeeting, ringcentral, outreach, insidesales, etc. These values are predefined by Gong, please contact help@gong.io to find the proper value for your system.",
                        "example": "clearslide"
                    },
                    "downloadMediaUrl": {
                        "type": "string",
                        "description": "The URL from which Gong can download the media file.\nThe URL must be unique, the audio or video file must be a maximum of 1.5GB.\nThe content-type must either start with 'audio' or 'video,' or should be 'application/octet-stream' or 'binary/octet-stream' followed by a subtype that specifies a supported file type (WAV, MP3, MP4, MKV and FLAC).\nIf you provide this URL, you should not perform the 'Add call media' step.",
                        "example": "https://upload-server.com/sample-call.mp3"
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "Optional workspace identifier. If specified, the call will be placed into this workspace, otherwise, the default algorithm for workspace placement will be applied.",
                        "example": "623457276584334"
                    },
                    "languageCode": {
                        "type": "string",
                        "description": "The language code the call should be transcribed to.\nThis field is optional as Gong automatically detects the language spoken in the call and transcribes it accordingly. Set this field only if you are sure of the language the call is in.\nValid values are: af-ZA, am-ET, ar-AE, ar-BH, ar-DZ, ar-EG, ar-IL, ar-IQ, ar-JO, ar-KW, ar-LB, ar-MA, ar-MR, ar-OM, ar-PS, ar-QA, ar-SA, ar-TN, ar-YE, az-AZ, bg-BG, bn-BD, bn-IN, bs-BA, ca-ES, cs-CZ, da-DK, de-AT, de-CH, de-DE, el-GR, en-AB, en-AU, en-CA, en-GB, en-IE, en-IN, en-NZ, en-PH, en-SG, en-US, en-WL, en-ZA, es-AR, es-BO, es-CL, es-CO, es-CR, es-DO, es-EC, es-ES, es-GT, es-HN, es-MX, es-NI, es-PA, es-PE, es-PR, es-PY, es-SV, es-US, es-UY, et-EE, eu-ES, fa-IR, fi-FI, fil-PH, fr-BE, fr-CA, fr-CH, fr-FR, gl-ES, gu-IN, he-IL, hi-IN, hr-HR, hu-HU, hy-AM, id-ID, is-IS, it-CH, it-IT, ja-JP, jv-ID, ka-GE, kk-KZ, km-KH, kn-IN, ko-KR, lo-LA, lt-LT, lv-LV, mk-MK, ml-IN, mn-MN, mr-IN, ms-MY, my-MM, ne-NP, nl-BE, nl-NL, no-NO, pa-Guru-IN, pl-PL, pt-BR, pt-PT, ro-RO, ru-RU, si-LK, sk-SK, sl-SI, sq-AL, sr-RS, su-ID, sv-SE, sw-KE, sw-TZ, ta-IN, ta-LK, ta-MY, ta-SG, te-IN, th-TH, tr-TR, uk-UA, ur-IN, ur-PK, uz-UZ, vi-VN, yue-Hant-HK, zh-CN, zh-TW, zu-ZA"
                    },
                    "primaryUser": {
                        "type": "string",
                        "description": "The Gong internal user ID of the team member who hosted the call.",
                        "example": "234599484848423"
                    }
                },
                "description": "New call metadata"
            },
            "SpeakersTimeline": {
                "type": "object",
                "properties": {
                    "precise": {
                        "type": "boolean",
                        "description": "Indicates whether the provided speech segments match the media precisely or need further refinement based on the media. \"Precisely\" here means that segments do not deviate from the actual speech in the media by more than 100ms.",
                        "example": true
                    },
                    "speechSegments": {
                        "type": "array",
                        "description": "The audio recording speech segments (who spoke when). ",
                        "items": {
                            "$ref": "#/components/schemas/SpeechSegment"
                        }
                    }
                },
                "description": "The audio recording speech segments (who spoke when). Note that speakersTimeline and mediaChannelId are mutually exclusive, when providing speakersTimeline - mediaChannelId will not be used."
            },
            "SpeechSegment": {
                "required": [
                    "fromTime",
                    "partyIds",
                    "toTime"
                ],
                "type": "object",
                "properties": {
                    "fromTime": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The start time of the segment in milliseconds from the beginning of the call.",
                        "format": "int32",
                        "example": 5100
                    },
                    "toTime": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The end time of the segment in milliseconds from the beginning of the call.",
                        "format": "int32",
                        "example": 24000
                    },
                    "partyIds": {
                        "type": "array",
                        "description": "The speaking parties in the segment, each must have a correlating partyId within 'parties'. It is allowed to provide overlapping segments, i.e. you can either specify multiple speakers in a segment or send several overlapping segments each marked with one speaker.",
                        "example": [
                            "1"
                        ],
                        "items": {
                            "type": "string",
                            "description": "The speaking parties in the segment, each must have a correlating partyId within 'parties'. It is allowed to provide overlapping segments, i.e. you can either specify multiple speakers in a segment or send several overlapping segments each marked with one speaker.",
                            "example": "[\"1\"]"
                        }
                    }
                },
                "description": "The audio recording speech segments (who spoke when). "
            },
            "CallAccessDetails": {
                "type": "object",
                "properties": {
                    "callId": {
                        "type": "string",
                        "description": "Gong's unique numeric call ID.",
                        "example": "7782342274025937895"
                    },
                    "users": {
                        "type": "array",
                        "description": "A list of users having access.",
                        "items": {
                            "$ref": "#/components/schemas/UserAccessDetails"
                        }
                    }
                },
                "description": "Call access details"
            },
            "CallsAccessDetailsResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "callAccessList": {
                        "type": "array",
                        "description": "A list, in which each item specifies a call & users with access to this call.",
                        "items": {
                            "$ref": "#/components/schemas/CallAccessDetails"
                        }
                    }
                }
            },
            "UserAccessDetails": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "Gong's unique numeric user ID.",
                        "example": "234599484848423"
                    }
                },
                "description": "User access details"
            },
            "CallsAccessGetDto": {
                "required": [
                    "callIds"
                ],
                "type": "object",
                "properties": {
                    "callIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Array of Gong's unique numeric call IDs.",
                        "example": [
                            "7782342274025937895"
                        ],
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "FilterRequestCallsAccessGetDto": {
                "required": [
                    "filter"
                ],
                "type": "object",
                "properties": {
                    "filter": {
                        "$ref": "#/components/schemas/CallsAccessGetDto",
                        "exampleSetFlag": false
                    }
                }
            },
            "CallTranscript": {
                "type": "object",
                "properties": {
                    "callId": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the call (up to 20 digits).",
                        "example": "7782342274025937895"
                    },
                    "transcript": {
                        "type": "array",
                        "description": "List of monologues.",
                        "items": {
                            "$ref": "#/components/schemas/Monologue"
                        }
                    }
                },
                "description": "A list with one entry per call."
            },
            "CallTranscripts": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "records": {
                        "$ref": "#/components/schemas/Records",
                        "exampleSetFlag": false
                    },
                    "callTranscripts": {
                        "type": "array",
                        "description": "A list with one entry per call.",
                        "items": {
                            "$ref": "#/components/schemas/CallTranscript"
                        }
                    }
                }
            },
            "Monologue": {
                "type": "object",
                "properties": {
                    "speakerId": {
                        "type": "string",
                        "description": "Unique ID of the speaker. Cross-reference this with the 'speakerId' field of objects in the 'parties' array returned from endpoint '/v2/calls/extensive' to identify the participant. ",
                        "example": "6432345678555530067"
                    },
                    "topic": {
                        "type": "string",
                        "description": "The name of the topic.",
                        "example": "Objections"
                    },
                    "sentences": {
                        "type": "array",
                        "description": "A list of sentences spoken in the monologue.",
                        "items": {
                            "$ref": "#/components/schemas/Sentence"
                        }
                    }
                },
                "description": "List of monologues."
            },
            "Sentence": {
                "type": "object",
                "properties": {
                    "start": {
                        "type": "integer",
                        "description": "The starting time of the sentence, in milliseconds from the start of the call.",
                        "format": "int64",
                        "example": 460230
                    },
                    "end": {
                        "type": "integer",
                        "description": "The end time of the sentence, in milliseconds from the start of the call.",
                        "format": "int64",
                        "example": 462343
                    },
                    "text": {
                        "type": "string",
                        "description": "The sentence.",
                        "example": "No wait, I think we should check that out first."
                    }
                },
                "description": "A list of sentences spoken in the monologue."
            },
            "CallsFilter": {
                "type": "object",
                "properties": {
                    "fromDateTime": {
                        "type": "string",
                        "description": "Date and time (in ISO-8601 format: '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC) from which to list recorded calls. Returns calls that started on or after the specified date and time. If not provided, list starts with earliest call. The date applies to call start time.",
                        "example": "2018-02-17T02:30:00-08:00"
                    },
                    "toDateTime": {
                        "type": "string",
                        "description": "Date and time (in ISO-8601 format: '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC) until which to list recorded calls. Returns calls that started up to but excluding specified date and time. If not provided, list ends with most recent call. The date applies to call start time.",
                        "example": "2018-02-19T02:30:00-08:00"
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "Optional Workspace identifier, if supplied the API will return only the calls belonging to this workspace.",
                        "example": "623457276584334"
                    },
                    "callIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of calls Ids to be filtered. If not supplied, returns all calls between fromDateTime and toDateTime.",
                        "writeOnly": true,
                        "example": [
                            "7782342274025937895"
                        ],
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Filter parameters."
            },
            "PublicApiBaseRequestV2CallsFilter": {
                "required": [
                    "filter"
                ],
                "type": "object",
                "properties": {
                    "cursor": {
                        "type": "string",
                        "description": "When paging is needed, provide the value supplied by the previous API call to bring the following page of records.",
                        "example": "eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM"
                    },
                    "filter": {
                        "$ref": "#/components/schemas/CallsFilter",
                        "exampleSetFlag": false
                    }
                }
            },
            "CallBasicData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the call (up to 20 digits).",
                        "example": "7782342274025937895"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to the page in the Gong web application where the call is available.",
                        "example": "https://app.gong.io/call?id=7782342274025937895"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the call.",
                        "example": "Example call"
                    },
                    "scheduled": {
                        "type": "string",
                        "description": "Scheduled date and time of the call in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).",
                        "format": "date-time",
                        "example": 1518863400.000000000
                    },
                    "started": {
                        "type": "string",
                        "description": "The date and time when the call was recorded in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).",
                        "format": "date-time",
                        "example": 1518863400.000000000
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration of the call, in seconds.",
                        "format": "int64",
                        "example": 460
                    },
                    "primaryUserId": {
                        "type": "string",
                        "description": "The primary user ID of the team member who hosted the call.",
                        "example": "234599484848423"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Call direction.",
                        "enum": [
                            "Inbound",
                            "Outbound",
                            "Conference",
                            "Unknown"
                        ]
                    },
                    "system": {
                        "type": "string",
                        "description": "The system with which the call was carried out (e.g., WebEx, ShoreTel, etc.).",
                        "example": "Outreach"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the call: 'internal' if all the participants are from the company, 'external' if some participants are not from the company, or 'unknown' if the scope is unknown.",
                        "example": "Internal",
                        "enum": [
                            "Internal",
                            "External",
                            "Unknown"
                        ]
                    },
                    "media": {
                        "type": "string",
                        "description": "Media type",
                        "example": "Video",
                        "enum": [
                            "Video",
                            "Audio"
                        ]
                    },
                    "language": {
                        "type": "string",
                        "description": "The language codes (as defined by ISO-639-2B). E.g., eng, fre, spa, ger, and ita. Also used are und (unsupported language), and zxx (not enough speech content for identification).",
                        "example": "eng"
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the call's workspace (up to 20 digits).",
                        "example": "623457276584334"
                    },
                    "sdrDisposition": {
                        "type": "string",
                        "description": "The SDR disposition of the call. This can be an automated value provided by the provider, or manually entered by the rep.",
                        "example": "Got the gatekeeper"
                    },
                    "clientUniqueId": {
                        "type": "string",
                        "description": "The call's unique identifier in the origin recording system (typically a telephony recording system). The identifier is provided to Gong during the call creation via the Public API or through telephony systems integrations.",
                        "example": "7JEHFRGXDDZFEW2FC4U"
                    },
                    "customData": {
                        "type": "string",
                        "description": "Metadata as was provided to Gong during the call creation via the Public API.",
                        "example": "Conference Call"
                    },
                    "purpose": {
                        "type": "string",
                        "description": "The purpose of the call.",
                        "example": "Demo Call"
                    },
                    "meetingUrl": {
                        "type": "string",
                        "description": "The meeting provider URL on which the web conference was recorded.",
                        "example": "https://zoom.us/j/123"
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "description": "If the call is private.",
                        "example": false
                    },
                    "calendarEventId": {
                        "type": "string",
                        "description": "The Id of the meeting in Google or Outlook Calendar.",
                        "example": "abcde@google.com"
                    }
                },
                "description": "call's metadata."
            },
            "CallContextDto": {
                "type": "object",
                "properties": {
                    "system": {
                        "type": "string",
                        "description": "External system name. e.g. Salesforce",
                        "example": "Salesforce",
                        "enum": [
                            "Salesforce",
                            "HubSpot",
                            "MicrosoftDynamic",
                            "Generic"
                        ]
                    },
                    "objects": {
                        "type": "array",
                        "description": "List of objects within the external system",
                        "items": {
                            "$ref": "#/components/schemas/ExternalCallObject"
                        }
                    }
                },
                "description": "Links to external systems such as CRM, Dialer, Case Management etc"
            },
            "CallData": {
                "type": "object",
                "properties": {
                    "metaData": {
                        "$ref": "#/components/schemas/CallBasicData",
                        "exampleSetFlag": false
                    },
                    "context": {
                        "type": "array",
                        "description": "A list of the agenda of each part of the call.",
                        "items": {
                            "$ref": "#/components/schemas/CallContextDto"
                        }
                    },
                    "parties": {
                        "type": "array",
                        "description": "A list of the call's participants",
                        "items": {
                            "$ref": "#/components/schemas/Party"
                        }
                    },
                    "content": {
                        "$ref": "#/components/schemas/ContentDto",
                        "exampleSetFlag": false
                    },
                    "interaction": {
                        "$ref": "#/components/schemas/InteractionMeasuresDto",
                        "exampleSetFlag": false
                    },
                    "collaboration": {
                        "$ref": "#/components/schemas/CollaborationDto",
                        "exampleSetFlag": false
                    },
                    "media": {
                        "$ref": "#/components/schemas/MediaDto",
                        "exampleSetFlag": false
                    }
                },
                "description": "A list with one entry per call."
            },
            "CallHighlightsItem": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "The text of the highlights section item."
                    },
                    "startTimes": {
                        "type": "array",
                        "description": "List of starting times of the highlights section item, in seconds from the start of the call.",
                        "items": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                }
            },
            "CallHighlightsSection": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "The title of the highlights section."
                    },
                    "items": {
                        "type": "array",
                        "description": "List of highlight items of the call in this section.",
                        "items": {
                            "$ref": "#/components/schemas/CallHighlightsItem"
                        }
                    }
                }
            },
            "CallKeyPoint": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "The text of the key point."
                    }
                }
            },
            "CallOutcome": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the call outcome, as automatically set by Gong AI",
                        "example": "MEETING_BOOKED"
                    },
                    "category": {
                        "type": "string",
                        "description": "The category of the call outcome, as automatically set by Gong AI",
                        "example": "Answered"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the call outcome, as automatically set by Gong AI",
                        "example": "Meeting booked"
                    }
                },
                "description": "The outcome of the call, as automatically set by Gong AI. Returned when it is available and contentSelector.exposedFields.content.callOutcome = true."
            },
            "CallOutlineItem": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "The text of this section item."
                    },
                    "startTime": {
                        "type": "number",
                        "description": "The starting time of this section item, in seconds from the start of the call.",
                        "format": "double"
                    }
                }
            },
            "CallOutlineSection": {
                "type": "object",
                "properties": {
                    "section": {
                        "type": "string",
                        "description": "The name of this section of the call."
                    },
                    "startTime": {
                        "type": "number",
                        "description": "The starting time of this section, in seconds, from the start of the call.",
                        "format": "double"
                    },
                    "duration": {
                        "type": "number",
                        "description": "The duration of this section, in seconds.",
                        "format": "double"
                    },
                    "items": {
                        "type": "array",
                        "description": "List of items of this section.",
                        "items": {
                            "$ref": "#/components/schemas/CallOutlineItem"
                        }
                    }
                }
            },
            "Calls": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "records": {
                        "$ref": "#/components/schemas/Records",
                        "exampleSetFlag": false
                    },
                    "calls": {
                        "type": "array",
                        "description": "A list with one entry per call.",
                        "items": {
                            "$ref": "#/components/schemas/CallData"
                        }
                    }
                }
            },
            "CollaborationDto": {
                "type": "object",
                "properties": {
                    "publicComments": {
                        "type": "array",
                        "description": "A list of public comments.",
                        "items": {
                            "$ref": "#/components/schemas/CommentDto"
                        }
                    }
                },
                "description": "Collaboration information added to the call"
            },
            "CommentDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the comment within the Gong's system.",
                        "example": "6843152929075440037"
                    },
                    "audioStartTime": {
                        "type": "number",
                        "description": "The number of seconds from the beginning of the call that the comment start refers to.",
                        "format": "float",
                        "example": 26
                    },
                    "audioEndTime": {
                        "type": "number",
                        "description": "The number of seconds from the beginning of the call that the comment ends refers to.",
                        "format": "float",
                        "example": 26
                    },
                    "commenterUserId": {
                        "type": "string",
                        "description": "Unique identifier of the user who wrote the comment.",
                        "example": "234599484848423"
                    },
                    "comment": {
                        "type": "string",
                        "description": "The comment itself. The comment may contains person tagging in this format @[user name](user Id)",
                        "example": "new comment"
                    },
                    "posted": {
                        "type": "string",
                        "description": "The date and time in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC); in which the comment was posted.",
                        "format": "date-time",
                        "example": 1518863400.000000000
                    },
                    "inReplyTo": {
                        "type": "string",
                        "description": "The unique identifier of the original comment in case the current comment is a reply to the original one.",
                        "example": "792390015966656336"
                    },
                    "duringCall": {
                        "type": "boolean",
                        "description": "True if the comment was written during the call, false if it was posted after the call."
                    }
                }
            },
            "ContentDto": {
                "type": "object",
                "properties": {
                    "structure": {
                        "type": "array",
                        "description": "A list of the agenda of each part of the call.",
                        "items": {
                            "$ref": "#/components/schemas/StructureDto"
                        }
                    },
                    "trackers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TrackerDto"
                        }
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TopicDto"
                        }
                    },
                    "pointsOfInterest": {
                        "$ref": "#/components/schemas/PointsOfInterest",
                        "exampleSetFlag": false
                    },
                    "brief": {
                        "type": "string",
                        "description": "The brief of the call. Returned when it is available and contentSelector.exposedFields.content.brief = true."
                    },
                    "outline": {
                        "type": "array",
                        "description": "Outline of the call, divided into sections. Returned when it is available and contentSelector.exposedFields.content.outline = true.",
                        "items": {
                            "$ref": "#/components/schemas/CallOutlineSection"
                        }
                    },
                    "highlights": {
                        "type": "array",
                        "description": "List of highlights of the call. Returned when it is available and contentSelector.exposedFields.content.highlights = true.",
                        "items": {
                            "$ref": "#/components/schemas/CallHighlightsSection"
                        }
                    },
                    "callOutcome": {
                        "$ref": "#/components/schemas/CallOutcome",
                        "exampleSetFlag": false
                    },
                    "keyPoints": {
                        "type": "array",
                        "description": "List of key points of the call. Returned when it is available and contentSelector.exposedFields.content.keyPoints = true.",
                        "items": {
                            "$ref": "#/components/schemas/CallKeyPoint"
                        }
                    }
                },
                "description": "Analysis of the interaction content."
            },
            "ExternalCallObject": {
                "type": "object",
                "properties": {
                    "objectType": {
                        "type": "string",
                        "description": "Object Type. e.g Opportunity.",
                        "example": "Opportunity",
                        "enum": [
                            "Opportunity",
                            "Account"
                        ]
                    },
                    "objectId": {
                        "type": "string",
                        "description": "Object ID",
                        "example": "0013601230sV7grAAC"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContextField"
                        }
                    },
                    "timing": {
                        "type": "string",
                        "description": "Timing of object",
                        "enum": [
                            "Now",
                            "TimeOfCall"
                        ]
                    }
                },
                "description": "External Object"
            },
            "ExternalPartyObject": {
                "type": "object",
                "properties": {
                    "objectType": {
                        "type": "string",
                        "description": "Object Type. e.g. Lead",
                        "example": "Contact",
                        "enum": [
                            "Contact",
                            "User",
                            "Lead"
                        ]
                    },
                    "objectId": {
                        "type": "string",
                        "description": "Object ID",
                        "example": "0013601230sV7grAAC"
                    },
                    "fields": {
                        "type": "array",
                        "description": "Object fields",
                        "items": {
                            "$ref": "#/components/schemas/PartyContextField"
                        }
                    },
                    "timing": {
                        "type": "string",
                        "description": "Timing of object",
                        "enum": [
                            "Now",
                            "TimeOfCall"
                        ]
                    }
                },
                "description": "External Object"
            },
            "InteractionMeasuresDto": {
                "type": "object",
                "properties": {
                    "speakers": {
                        "type": "array",
                        "description": "A list of the talk duration per speaker.",
                        "items": {
                            "$ref": "#/components/schemas/UserSpeaker"
                        }
                    },
                    "interactionStats": {
                        "type": "array",
                        "description": "A list of interaction statistics. Applicable values: 'Talk Ratio', 'Longest Monologue', 'Longest Customer Story', 'Interactivity', 'Patience'.",
                        "items": {
                            "$ref": "#/components/schemas/InteractionStatsDto"
                        }
                    },
                    "video": {
                        "type": "array",
                        "description": "A list of video statistics about what's presented and for how long.",
                        "items": {
                            "$ref": "#/components/schemas/VideoInteractionDto"
                        }
                    },
                    "questions": {
                        "$ref": "#/components/schemas/Questions",
                        "exampleSetFlag": false
                    }
                },
                "description": "Metrics collected around the interaction during the call."
            },
            "InteractionStatsDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Stat name",
                        "example": "Interactivity"
                    },
                    "value": {
                        "type": "number",
                        "description": "Stat measurement",
                        "example": 56
                    }
                },
                "description": "Interaction statistics"
            },
            "MediaDto": {
                "type": "object",
                "properties": {
                    "audioUrl": {
                        "type": "string",
                        "description": "If true and exist, add audio url of the call. The url will be available for 8 hours.",
                        "format": "url"
                    },
                    "videoUrl": {
                        "type": "string",
                        "description": "If true and exist, add video url of the call. The url will be available for 8 hours.",
                        "format": "url"
                    }
                },
                "description": "The media urls of the call."
            },
            "Party": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique ID of the participant in the call.",
                        "example": "56825452554556"
                    },
                    "emailAddress": {
                        "type": "string",
                        "description": "Email address.",
                        "example": "test@test.com"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the participant.",
                        "example": "Test User"
                    },
                    "title": {
                        "type": "string",
                        "description": "The job title of the participant",
                        "example": "Enterprise Account Executive"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID of the participant within the Gong system, if the participant exists in the system.",
                        "example": "234599484848423"
                    },
                    "speakerId": {
                        "type": "string",
                        "description": "Unique ID of a participant that spoke in the call. References to this id will appear in the '/v2/calls/transcript' endpoint response.",
                        "example": "6432345678555530067"
                    },
                    "context": {
                        "type": "array",
                        "description": "A list of links to external systems such as CRM, Dialer, Case Management, etc.",
                        "items": {
                            "$ref": "#/components/schemas/PartyContextDto"
                        }
                    },
                    "affiliation": {
                        "type": "string",
                        "description": "Whether the participant is from the company or not.",
                        "enum": [
                            "Internal",
                            "External",
                            "Unknown"
                        ]
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The phone number of the participant.",
                        "example": "+1 123-567-8989"
                    },
                    "methods": {
                        "type": "array",
                        "description": "Whether the participant was invited to the meeting or only attended the call.",
                        "items": {
                            "type": "string",
                            "description": "Whether the participant was invited to the meeting or only attended the call.",
                            "enum": [
                                "Invitee",
                                "Attendee"
                            ]
                        }
                    }
                }
            },
            "PartyContextDto": {
                "type": "object",
                "properties": {
                    "system": {
                        "type": "string",
                        "description": "External system name. e.g. Salesforce",
                        "example": "Salesforce",
                        "enum": [
                            "Salesforce",
                            "HubSpot",
                            "MicrosoftDynamic",
                            "Generic"
                        ]
                    },
                    "objects": {
                        "type": "array",
                        "description": " List of objects within the external system",
                        "items": {
                            "$ref": "#/components/schemas/ExternalPartyObject"
                        }
                    }
                },
                "description": "Links to external systems such as CRM, Dialer, Case Management etc"
            },
            "PartyContextField": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Field name. All custom fields are supported.",
                        "example": "name"
                    },
                    "value": {
                        "type": "object",
                        "description": "Object value",
                        "example": "Gong Inc."
                    }
                },
                "description": "External object data"
            },
            "PointOfInterest": {
                "type": "object",
                "properties": {
                    "snippetStartTime": {
                        "type": "number",
                        "description": "The number of seconds from the beginning of the call that the snippet start refers to.",
                        "format": "double",
                        "example": 26
                    },
                    "snippetEndTime": {
                        "type": "number",
                        "description": "The number of seconds from the beginning of the call that the snippet end refers to.",
                        "format": "double",
                        "example": 26
                    },
                    "speakerID": {
                        "type": "string",
                        "description": "Unique ID of the participant in the call.",
                        "example": "56825452554556"
                    },
                    "snippet": {
                        "type": "string",
                        "description": "The snippet including the action.",
                        "example": "And I'll send you an invite with a link that you can use at that time as well."
                    }
                }
            },
            "PointsOfInterest": {
                "type": "object",
                "properties": {
                    "actionItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PointOfInterest"
                        }
                    }
                },
                "description": "Points of interest of the call."
            },
            "Questions": {
                "type": "object",
                "properties": {
                    "companyCount": {
                        "type": "integer",
                        "description": "The number of questions asked by company speakers.",
                        "format": "int32"
                    },
                    "nonCompanyCount": {
                        "type": "integer",
                        "description": "The number of questions asked by non-company speakers.",
                        "format": "int32"
                    }
                },
                "description": "Question counts of the call."
            },
            "StructureDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The agenda name",
                        "example": "Meeting Setup"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration of this part of the call",
                        "format": "int64",
                        "example": 67
                    }
                },
                "description": "Agenda of the current part of the call"
            },
            "TopicDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the topic (e.g., Pricing).",
                        "example": "Objections"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The total time, in seconds, spent on this topic within the call.",
                        "format": "int32",
                        "example": 86
                    }
                }
            },
            "TrackerDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of the Tracker.",
                        "example": "56825452554556"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Tracker (e.g., Stores).",
                        "example": "Competitors"
                    },
                    "count": {
                        "type": "integer",
                        "description": "The number of times words in this Tracker occurred in the call.",
                        "format": "int32",
                        "example": 7
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the tracker - Keyword or Smart.",
                        "example": "KEYWORD",
                        "enum": [
                            "KEYWORD",
                            "SMART"
                        ]
                    },
                    "occurrences": {
                        "type": "array",
                        "description": "Details when the smart or keyword tracker term came up in the call. The list does not specify each phrase defined in the tracker, rather it lists when any term relevant to the tracker was mentioned. Empty when keyword trackers are set to display each term in the tracker separately.",
                        "items": {
                            "$ref": "#/components/schemas/occurrences"
                        }
                    },
                    "phrases": {
                        "type": "array",
                        "description": "Details when each specific phrase defined in the keyword tracker came up in the call. Smart trackers are not listed.",
                        "items": {
                            "$ref": "#/components/schemas/trackerPhrases"
                        }
                    }
                }
            },
            "UserSpeaker": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique ID of the participant in the call.",
                        "example": "56825452554556"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User Id within the Gong system",
                        "example": "234599484848423"
                    },
                    "talkTime": {
                        "type": "number",
                        "description": "Talk duration in seconds",
                        "format": "double",
                        "example": 145
                    }
                },
                "description": "Talking duration"
            },
            "VideoInteractionDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Video segment type. Can have the values: 'Browser', 'Presentation', 'WebcamPrimaryUser', 'WebcamNonCompany', and 'Webcam'.\n\n<b>'Browser'</b>: When the video segment shows a web browser.\n\n<b>'Presentation'</b>: When the video segment shows a presentation (such as PowerPoint).\n\n<b>'WebcamPrimaryUser'</b>: When the video segment shows the webcam of the primary user.\n\n<b>'WebcamNonCompany'</b>: When the video segment shows webcam speakers that gong has identified as being non-company.\n\n<b>'Webcam'</b>: When the video segment shows any webcam.",
                        "example": "Browser"
                    },
                    "duration": {
                        "type": "number",
                        "description": "Total video segments duration in seconds.",
                        "format": "float",
                        "example": 218
                    }
                },
                "description": "Video statistics"
            },
            "occurrences": {
                "type": "object",
                "properties": {
                    "startTime": {
                        "type": "number",
                        "description": "The number of seconds from the beginning of the call when the tracker phrase was captured.",
                        "format": "double",
                        "example": 32.56
                    },
                    "speakerId": {
                        "type": "string",
                        "description": "Unique ID of the speaker in the call who said the tracker term. Same as the speakerID in the \"parties\" field and in the transcript.",
                        "example": "234599484848423"
                    }
                }
            },
            "trackerPhrases": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "The number of times this phrase was mentioned in the call.",
                        "format": "int32",
                        "example": 5
                    },
                    "occurrences": {
                        "type": "array",
                        "description": "Lists when each keyword tracker phrase was mentioned in the call.",
                        "items": {
                            "$ref": "#/components/schemas/occurrences"
                        }
                    },
                    "phrase": {
                        "type": "string",
                        "description": "The specific phrase within the tracker (e.g., Walmart).",
                        "example": "Walmart"
                    }
                }
            },
            "CallCollaboration": {
                "type": "object",
                "properties": {
                    "publicComments": {
                        "type": "boolean",
                        "description": "If true, add public comments made for this call",
                        "example": true
                    }
                },
                "description": "Call collaboration"
            },
            "CallContent": {
                "type": "object",
                "properties": {
                    "structure": {
                        "type": "boolean",
                        "description": "If true, add call agenda, if available",
                        "example": false
                    },
                    "topics": {
                        "type": "boolean",
                        "description": "If true, add duration of call topics",
                        "example": false
                    },
                    "trackers": {
                        "type": "boolean",
                        "description": "If true, returns smart tracker and keyword tracker information for the call.",
                        "example": false
                    },
                    "trackerOccurrences": {
                        "type": "boolean",
                        "description": "If true, the API will return the timing and speaker ID of each occurrence of a tracker (in addition to other tracker data). This functionality must be used in combination with the \"trackers\" field. The occurrence data is available only for the calls recorded since Jan 1, 2023, contact Gong support if a backfill of this data is required.",
                        "example": false
                    },
                    "pointsOfInterest": {
                        "type": "boolean",
                        "description": "If true, add call points of interest",
                        "example": false
                    },
                    "brief": {
                        "type": "boolean",
                        "description": "When true, returns the spotlight call brief.",
                        "example": true
                    },
                    "outline": {
                        "type": "boolean",
                        "description": "When true, returns the call outline.",
                        "example": true
                    },
                    "highlights": {
                        "type": "boolean",
                        "description": "When true, returns the call highlights.",
                        "example": true
                    },
                    "callOutcome": {
                        "type": "boolean",
                        "description": "When true, returns the outcome of the call.",
                        "example": true
                    },
                    "keyPoints": {
                        "type": "boolean",
                        "description": "When true, returns the key points of the call.",
                        "example": true
                    }
                },
                "description": "The content of the call"
            },
            "CallInteraction": {
                "type": "object",
                "properties": {
                    "speakers": {
                        "type": "boolean",
                        "description": "If true, add the time each participant spoke.",
                        "example": true
                    },
                    "video": {
                        "type": "boolean",
                        "description": "If true, add video statistics",
                        "example": true
                    },
                    "personInteractionStats": {
                        "type": "boolean",
                        "description": "If true, add statistics for the host of the call.",
                        "example": true
                    },
                    "questions": {
                        "type": "boolean",
                        "description": "If true, add question counts",
                        "example": true
                    }
                },
                "description": "The interaction data of the call"
            },
            "CallsRequestFilterWithOwners": {
                "type": "object",
                "properties": {
                    "fromDateTime": {
                        "type": "string",
                        "description": "Date and time (in ISO-8601 format: '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC) from which to list recorded calls. Returns calls that started on or after the specified date and time. If not provided, list starts with earliest call. The date applies to call start time.",
                        "example": "2018-02-17T02:30:00-08:00"
                    },
                    "toDateTime": {
                        "type": "string",
                        "description": "Date and time (in ISO-8601 format: '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC) until which to list recorded calls. Returns calls that started up to but excluding specified date and time. If not provided, list ends with most recent call. The date applies to call start time.",
                        "example": "2018-02-19T02:30:00-08:00"
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "Optional Workspace identifier, if supplied the API will return only the calls belonging to this workspace.",
                        "example": "623457276584334"
                    },
                    "callIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "List of calls Ids to be filtered. If not supplied, returns all calls between fromDateTime and toDateTime.",
                        "writeOnly": true,
                        "example": [
                            "7782342274025937895"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "primaryUserIds": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "An optional list of user identifiers, if supplied the API will return only the calls hosted by the specified users. The identifiers in this field match the primaryUserId field of the calls.",
                        "example": [
                            "7782342274025937895"
                        ],
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "description": "Filter parameters."
            },
            "ContentSelector": {
                "type": "object",
                "properties": {
                    "context": {
                        "type": "string",
                        "description": "If 'Basic', add links to external systems (context objects) such as CRM, Telephony System, Case Management. If 'Extended' include also data (context fields) for these links. Default value 'None'",
                        "enum": [
                            "None",
                            "Basic",
                            "Extended"
                        ]
                    },
                    "contextTiming": {
                        "type": "array",
                        "description": "Timing for the context data. The field is optional and can contain either \"Now\" or \"TimeOfCall\" or both. The default value is [\"Now\"]. Can be provided only when the context field is set to 'Extended'",
                        "items": {
                            "type": "string",
                            "description": "Timing for the context data. The field is optional and can contain either \"Now\" or \"TimeOfCall\" or both. The default value is [\"Now\"]. Can be provided only when the context field is set to 'Extended'",
                            "enum": [
                                "Now",
                                "TimeOfCall"
                            ]
                        }
                    },
                    "exposedFields": {
                        "$ref": "#/components/schemas/ExposedFields",
                        "exampleSetFlag": false
                    }
                },
                "description": "The content selector identifies which data components, if any, are needed, by the caller"
            },
            "ExposedFields": {
                "type": "object",
                "properties": {
                    "parties": {
                        "type": "boolean",
                        "description": "If true, add information about the parties of the call",
                        "example": true
                    },
                    "content": {
                        "$ref": "#/components/schemas/CallContent",
                        "exampleSetFlag": false
                    },
                    "interaction": {
                        "$ref": "#/components/schemas/CallInteraction",
                        "exampleSetFlag": false
                    },
                    "collaboration": {
                        "$ref": "#/components/schemas/CallCollaboration",
                        "exampleSetFlag": false
                    },
                    "media": {
                        "type": "boolean",
                        "description": "If true and exist, add audio url and video url of the call. The urls will be available for 8 hours.",
                        "example": true
                    }
                },
                "description": "The exposed fields identifies which field, if any, are returned in the response object"
            },
            "PublicApiBaseRequestWithDataV2CallsRequestFilterWithOwnersContentSelector": {
                "required": [
                    "filter"
                ],
                "type": "object",
                "properties": {
                    "cursor": {
                        "type": "string",
                        "description": "When paging is needed, provide the value supplied by the previous API call to bring the following page of records.",
                        "example": "eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM"
                    },
                    "filter": {
                        "$ref": "#/components/schemas/CallsRequestFilterWithOwners",
                        "exampleSetFlag": false
                    },
                    "contentSelector": {
                        "$ref": "#/components/schemas/ContentSelector",
                        "exampleSetFlag": false
                    }
                }
            },
            "WorkspaceMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the workspace (up to 20 digits).",
                        "example": "623457276584334"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workspace.",
                        "example": "Some Workspace"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workspace.",
                        "example": "This is one of our workspaces"
                    }
                },
                "description": "A list, in which each item provides a workspace metadata."
            },
            "WorkspacesMetadata": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "workspaces": {
                        "type": "array",
                        "description": "A list, in which each item provides a workspace metadata.",
                        "items": {
                            "$ref": "#/components/schemas/WorkspaceMetadata"
                        }
                    }
                }
            },
            "User": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserMetadata",
                        "exampleSetFlag": false
                    }
                }
            },
            "SettingsHistory": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "userSettingsHistory": {
                        "type": "array",
                        "description": "User's settings history.",
                        "items": {
                            "$ref": "#/components/schemas/UserSettingsHistory"
                        }
                    }
                }
            },
            "UserSettingsHistory": {
                "type": "object",
                "properties": {
                    "setting": {
                        "type": "string",
                        "description": "The user capability that was changed",
                        "enum": [
                            "webConferencesRecorded",
                            "preventWebConferenceRecording",
                            "emailsImported",
                            "preventEmailImport",
                            "active",
                            "nonRecordedMeetingsImported",
                            "gongConnectEnabled",
                            "callsImported",
                            "interviewsRecorded",
                            "preventInterviewRecording"
                        ]
                    },
                    "value": {
                        "type": "boolean",
                        "description": "The new value that was set",
                        "example": true
                    },
                    "time": {
                        "type": "string",
                        "description": "The date and time the action was set, in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).",
                        "example": "2018-02-19T02:30:00-08:00"
                    }
                },
                "description": "User's settings history."
            },
            "KeywordTracker": {
                "type": "object",
                "properties": {
                    "trackerId": {
                        "type": "string",
                        "description": "The unique identifier of the tracker.",
                        "example": "6840000929075400007"
                    },
                    "trackerName": {
                        "type": "string",
                        "description": "The name of the tracker.",
                        "example": "Competitors"
                    },
                    "workspaceId": {
                        "type": "string",
                        "description": "The id of the workspace the tracker is in.",
                        "example": "623457276584334"
                    },
                    "languageKeywords": {
                        "type": "array",
                        "description": "The words and phrases defined for the tracker. Each languagueKeywords object contains the words and phrases defined in the specified language.",
                        "items": {
                            "$ref": "#/components/schemas/TrackerLanguageKeyword"
                        }
                    },
                    "affiliation": {
                        "type": "string",
                        "description": "Sets whether to track the keywords when said by people affiliated to a specific company. Options are: \"Anyone\", \"Company\", \"NonCompany\".",
                        "example": "NonCompany"
                    },
                    "partOfQuestion": {
                        "type": "boolean",
                        "description": "When true, only looks for the keywords when they are part of a question.",
                        "example": false
                    },
                    "saidAt": {
                        "type": "string",
                        "description": "Sets whether the words and phrases are tracked at the beginning, end or anytime in a call. Options are: \"Anytime\", \"First\", or \"Last\". For “First” and “Last” see the saidAtInterval and saidAtUnit fields to see how long to track the keywords for.",
                        "example": "Anytime"
                    },
                    "saidAtInterval": {
                        "type": "integer",
                        "description": "Sets the period of time to check if the words or phrases came up in the call (according to the saidAt setting). This can be either minutes or percent depending on the value in the saidAtUnit parameter.",
                        "format": "int32"
                    },
                    "saidAtUnit": {
                        "type": "string",
                        "description": "Sets whether the time to look for keywords is in minutes or a percentage of the call duration (according to the saidAt setting).",
                        "example": "minutes"
                    },
                    "saidInTopics": {
                        "type": "array",
                        "description": "Sets the topics in the call the tracker terms should be picked up in.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "saidInCallParts": {
                        "type": "array",
                        "description": "Sets the parts of the call to look for the keyword trackers in.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filterQuery": {
                        "type": "string",
                        "description": "A filter that defines which calls to include when searching for the keyword tracker. The filter is in JSON and is in the URL of the search page. Example: a filter for all outbound calls { \"type\": \"And\", \"filters\": [ { \"type\": \"CallDirection\", \"terms\": [\"OUTBOUND\"] } ] }",
                        "example": "{\"type\":\"And\",\"filters\":[{\"type\":\"CallDirection\",\"terms\":[\"OUTBOUND\"]}]}"
                    },
                    "created": {
                        "type": "string",
                        "description": "Sets the date and time the tracker was created, in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.",
                        "example": "2018-02-17T02:30:00-08:00"
                    },
                    "creatorUserId": {
                        "type": "string",
                        "description": "The Id of the team member who created the tracker. Null when the tracker is built-in.",
                        "example": "234599484848423"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The date and time the tracker settings were last updated, in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.",
                        "example": "2018-02-17T02:30:00-08:00"
                    },
                    "updaterUserId": {
                        "type": "string",
                        "description": "The Id of the team member who updated the tracker. Null when the tracker is built-in.",
                        "example": "234599484848423"
                    }
                },
                "description": "The definition of a tracker."
            },
            "TrackerLanguageKeyword": {
                "type": "object",
                "properties": {
                    "language": {
                        "type": "string",
                        "description": "The ISO 639-2/B language code for the language the keywords are in. When set to \"mul\" (ISO 639-2/B code for multiple languages), the keywords are relevant for all languages.",
                        "example": "ukr"
                    },
                    "keywords": {
                        "type": "array",
                        "description": "A list of words and phrases in the specified language.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "includeRelatedForms": {
                        "type": "boolean",
                        "description": "When true the tracker identifies words in different forms, for example, if the keyword is \"organize\", \"organized\" and \"organizes\" are also included.",
                        "example": false
                    }
                },
                "description": "The tracker keywords definition."
            },
            "Trackers": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "keywordTrackers": {
                        "type": "array",
                        "description": "A list of keyword trackers.",
                        "items": {
                            "$ref": "#/components/schemas/KeywordTracker"
                        }
                    }
                }
            },
            "Question": {
                "type": "object",
                "properties": {
                    "questionId": {
                        "type": "integer",
                        "description": "The identifier for the question.",
                        "format": "int64"
                    },
                    "questionRevisionId": {
                        "type": "integer",
                        "description": "The identifier for the revision version of the question.",
                        "format": "int64",
                        "example": 43955224753211112
                    },
                    "questionText": {
                        "type": "string",
                        "description": "The question's text.",
                        "example": "How do you evaluate the SDR's overall performance in the call?"
                    },
                    "isOverall": {
                        "type": "boolean",
                        "description": "If the question is the main overall question.",
                        "example": false
                    },
                    "questionType": {
                        "type": "string",
                        "description": "The type of question.",
                        "example": "RANGE"
                    },
                    "answerGuide": {
                        "type": "string",
                        "description": "The guide for answering the question.",
                        "example": "Answer is in the small talk"
                    },
                    "minRange": {
                        "type": "integer",
                        "description": "The minimum value that can be selected in the answer. Null for questions with no range.",
                        "format": "int32",
                        "example": 0
                    },
                    "maxRange": {
                        "type": "integer",
                        "description": "The maximum value that can be selected in the answer. Null for questions with no range.",
                        "format": "int32",
                        "example": 50
                    },
                    "answerOptions": {
                        "type": "array",
                        "description": "The answer options in case of multi-select or single-select type question. Null otherwise.",
                        "items": {
                            "$ref": "#/components/schemas/QuestionOption"
                        }
                    }
                },
                "description": "The questions in the scorecard."
            },
            "QuestionOption": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The identifier of the option.",
                        "format": "int32",
                        "example": 1
                    },
                    "text": {
                        "type": "string",
                        "description": "The option’s text.",
                        "example": "The SDR did not mention the product"
                    }
                },
                "description": "The answer options in case of multi-select or single-select type question. Null otherwise."
            },
            "Scorecard": {
                "type": "object",
                "properties": {
                    "scorecardId": {
                        "type": "integer",
                        "description": "The identifier of the scorecard.",
                        "format": "int64",
                        "example": 6843152929075440037
                    },
                    "scorecardName": {
                        "type": "string",
                        "description": "Scorecard name.",
                        "example": "SDR Call Scorecard"
                    },
                    "workspaceId": {
                        "type": "integer",
                        "description": "Scorecard workspaceId.",
                        "format": "int64",
                        "example": 623457276584334
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "If the scorecard is enabled or not.",
                        "example": true
                    },
                    "updaterUserId": {
                        "type": "integer",
                        "description": "The user Id of the team member that updated the scorecard.",
                        "format": "int64",
                        "example": 234599484848423
                    },
                    "created": {
                        "type": "string",
                        "description": "The date and time when the scorecard was created in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.",
                        "format": "date-time",
                        "example": 1518863400.000000000
                    },
                    "updated": {
                        "type": "string",
                        "description": "The date and time when the scorecard was updated in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.",
                        "format": "date-time",
                        "example": 1519036200.000000000
                    },
                    "questions": {
                        "type": "array",
                        "description": "The questions in the scorecard.",
                        "items": {
                            "$ref": "#/components/schemas/Question"
                        }
                    }
                },
                "description": "A list, in which each item contains one scorecard."
            },
            "Scorecards": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "scorecards": {
                        "type": "array",
                        "description": "A list, in which each item contains one scorecard.",
                        "items": {
                            "$ref": "#/components/schemas/Scorecard"
                        }
                    }
                }
            },
            "PermissionProfileUsersResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "users": {
                        "type": "array",
                        "description": "A list, in which each item specifies a user attached to the permission profile.",
                        "items": {
                            "$ref": "#/components/schemas/UserSimpleMetadata"
                        }
                    }
                }
            },
            "UserSimpleMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the user (up to 20 digits).",
                        "example": "234599484848423"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the Gong user.",
                        "example": "Jon"
                    },
                    "emailAddress": {
                        "type": "string",
                        "description": "The email address of the Gong user.",
                        "example": "test@test.com"
                    }
                },
                "description": "A list, in which each item specifies a user attached to the permission profile."
            },
            "LogsResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "records": {
                        "$ref": "#/components/schemas/Records",
                        "exampleSetFlag": false
                    },
                    "logEntries": {
                        "type": "array",
                        "description": "A list, in which each item specifies one log.",
                        "items": {
                            "$ref": "#/components/schemas/logEntry"
                        }
                    }
                }
            },
            "logEntry": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the user (up to 20 digits), if available.",
                        "example": "234599484848423"
                    },
                    "userEmailAddress": {
                        "type": "string",
                        "description": "The email address of the user, if available.",
                        "example": "test@test.com"
                    },
                    "userFullName": {
                        "type": "string",
                        "description": "The full name of the user, if available.",
                        "example": "Jon Snow"
                    },
                    "impersonatorUserId": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the impersonating user (up to 20 digits), if available.",
                        "example": "234599484848423"
                    },
                    "impersonatorEmailAddress": {
                        "type": "string",
                        "description": "The email address of the impersonating user, if available.",
                        "example": "test@test.com"
                    },
                    "impersonatorFullName": {
                        "type": "string",
                        "description": "The full name of the impersonating user, if available.",
                        "example": "Jon Snow"
                    },
                    "impersonatorCompanyId": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the impersonating user's company id (up to 20 digits), if available.",
                        "example": "234599484848423"
                    },
                    "eventTime": {
                        "type": "string",
                        "description": "The time in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC); when log was created.",
                        "example": "2018-02-17T02:30:00-08:00"
                    },
                    "logRecord": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "description": "The list of log fields and associated values. This element will be populated dynamically by the log record, depending on the type of log."
                        },
                        "description": "The list of log fields and associated values. This element will be populated dynamically by the log record, depending on the type of log."
                    }
                },
                "description": "A list, in which each item specifies one log."
            },
            "LibraryFolder": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for a library's folder (up to 20 digits).",
                        "example": "3843152912968920037"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the folder.",
                        "example": "Sales Onboarding"
                    },
                    "parentFolderId": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for library's parent folder (null for root folder).",
                        "example": "295738305212375930"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the user who added the folder.",
                        "example": "234599484848423"
                    },
                    "updated": {
                        "type": "string",
                        "description": "Folder's last update time in the ISO-8601 format (e.g., '2020-03-14T05:30:00-08:00').",
                        "format": "date-time",
                        "example": 1584192600.000000000
                    }
                },
                "description": "Basic details such as sub-folders, title, etc."
            },
            "LibraryResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "folders": {
                        "type": "array",
                        "description": "A list, in which each item specifies one folder.",
                        "items": {
                            "$ref": "#/components/schemas/LibraryFolder"
                        }
                    }
                }
            },
            "LibraryCall": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier of a call (up to 20 digits).",
                        "example": "7782342274025937895"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the call.",
                        "example": "Example call"
                    },
                    "note": {
                        "type": "string",
                        "description": "A note attached to the call in the folder. The note is optional.",
                        "example": "sample note"
                    },
                    "addedBy": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the user who added the call to folder.",
                        "example": "234599484848423"
                    },
                    "created": {
                        "type": "string",
                        "description": "The date and time when the call was added to folder in the ISO-8601 format (e.g., '2020-01-12T14:30:00-08:00').",
                        "format": "date-time",
                        "example": 1578868200.000000000
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the call.",
                        "example": "https://app.gong.io/call?id=3636865806219496180&highlights=%5B%7B%22to%22%3A+3240%2C+%22from%22%3A+1200%2C+%22type%22%3A+%22LIBRARY%22%7D%5D"
                    },
                    "snippet": {
                        "$ref": "#/components/schemas/Snippet",
                        "exampleSetFlag": false
                    }
                },
                "description": "Basic details such as id, title, notes, etc."
            },
            "LibraryFolderListOfCallsResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "id": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for a library's folder (up to 20 digits).",
                        "example": "3843152912968920037"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the folder.",
                        "example": "Sales Onboarding"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the user who added the folder.",
                        "example": "234599484848423"
                    },
                    "updated": {
                        "type": "string",
                        "description": "Folder's last update time in the ISO-8601 format (e.g., '2020-03-14T05:30:00-08:00').",
                        "format": "date-time",
                        "example": 1584192600.000000000
                    },
                    "calls": {
                        "type": "array",
                        "description": "A list, in which each item represents one library call.",
                        "items": {
                            "$ref": "#/components/schemas/LibraryCall"
                        }
                    }
                }
            },
            "Snippet": {
                "type": "object",
                "properties": {
                    "fromSec": {
                        "type": "integer",
                        "description": "Call snippet start in seconds relative to the call start time. For example 305 is a snippet that starts after 5 minutes and 5 seconds after the beginning of the call.",
                        "format": "int32",
                        "example": 21
                    },
                    "toSec": {
                        "type": "integer",
                        "description": "Call snippet end in seconds relative to the call start time. For example 900 means that this snippet ends after exactly 15 minutes after the beginning of the call.",
                        "format": "int32",
                        "example": 132
                    }
                },
                "description": "Snippet of call"
            },
            "FlowsResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "records": {
                        "$ref": "#/components/schemas/Records",
                        "exampleSetFlag": false
                    },
                    "flows": {
                        "type": "array",
                        "description": "A list, in which each item specifies one Flow.",
                        "items": {
                            "$ref": "#/components/schemas/PublicApiFlow"
                        }
                    }
                }
            },
            "PublicApiFlow": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the flow",
                        "example": "1695493301223590792"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the flow",
                        "example": "Personal Flow"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The id of the folder this flow is under",
                        "example": "1695493301223573465"
                    },
                    "folderName": {
                        "type": "string",
                        "description": "The name of the folder this flow is under",
                        "example": "1695493301223573465"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The flow visibility type",
                        "enum": [
                            "Company",
                            "Personal",
                            "Shared"
                        ]
                    },
                    "creationDate": {
                        "type": "string",
                        "description": "Creation time of the flow in ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).",
                        "example": "2018-02-17T02:30:00-08:00"
                    },
                    "exclusive": {
                        "type": "boolean",
                        "description": "indicates whether a prospect in this flow can be added to other flows",
                        "example": true
                    }
                },
                "description": "A list, in which each item specifies one Flow."
            },
            "CallReference": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the call (up to 20 digits).",
                        "example": "7782342274025937895"
                    },
                    "status": {
                        "type": "string",
                        "description": "Call status",
                        "example": "COMPLETED"
                    },
                    "externalSystems": {
                        "type": "array",
                        "description": "A list of links to external systems such as CRM, Telephony System, Case Management, etc.",
                        "items": {
                            "$ref": "#/components/schemas/ExternalSystem"
                        }
                    }
                },
                "description": "Details of a call referencing the email address."
            },
            "CustomerData": {
                "type": "object",
                "properties": {
                    "system": {
                        "type": "string",
                        "description": "External system name.",
                        "example": "Salesforce",
                        "enum": [
                            "Salesforce",
                            "HubSpot",
                            "MicrosoftDynamic",
                            "Generic"
                        ]
                    },
                    "objects": {
                        "type": "array",
                        "description": "List of objects in the external system.",
                        "items": {
                            "$ref": "#/components/schemas/CustomerDataObject"
                        }
                    }
                },
                "description": "A list of links to data from external systems (such as CRM, Telephony System, Case Management, etc.) that reference the email address and that Gong stores."
            },
            "CustomerDataObject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier (up to 20 digits) for the Lead or Contact.",
                        "example": "7782342274025937895"
                    },
                    "objectType": {
                        "type": "string",
                        "description": "Object Type.",
                        "example": "Contact",
                        "enum": [
                            "Lead",
                            "Contact"
                        ]
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External ID.",
                        "example": "0013601230sV7grAAC"
                    },
                    "mirrorId": {
                        "type": "string",
                        "description": "Crm Mirror ID.",
                        "example": "\"{\\\"integrationId\\\":\\\"262834820328732\\\",\\\"crmObjectType\\\":\\\"CONTACT\\\",\\\"crmId\\\":\\\"0031Q00002DFhi4QAD\\\"}\""
                    },
                    "fields": {
                        "type": "array",
                        "description": "Object fields.",
                        "items": {
                            "$ref": "#/components/schemas/ContextField"
                        }
                    }
                },
                "description": "List of objects in the external system."
            },
            "EmailMessage": {
                "type": "object",
                "properties": {
                    "from": {
                        "type": "string",
                        "description": "The sender's email address.",
                        "example": "test@test.com"
                    },
                    "id": {
                        "type": "string",
                        "description": "Gong's unique 32 character identifier for the email message.",
                        "example": "223mjfaaqqjuegabiyrmpctvcwwl75oz"
                    },
                    "sentTime": {
                        "type": "string",
                        "description": "The date and time the email message was sent in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.",
                        "example": "2019-01-20T00:00:00-08:00"
                    },
                    "mailbox": {
                        "type": "string",
                        "description": "The mailbox from which the email was retrieved.",
                        "example": "test@test.com"
                    },
                    "messageHash": {
                        "type": "string",
                        "description": "Hash code of the email message.",
                        "example": "l3z7w2s7oircdabnkwizmycm6g2uwznc"
                    }
                },
                "description": "Related email messages."
            },
            "ExternalSystem": {
                "type": "object",
                "properties": {
                    "system": {
                        "type": "string",
                        "description": "External system name.",
                        "example": "Salesforce",
                        "enum": [
                            "Salesforce",
                            "HubSpot",
                            "MicrosoftDynamic",
                            "Generic"
                        ]
                    },
                    "objects": {
                        "type": "array",
                        "description": "List of objects within the external system.",
                        "items": {
                            "$ref": "#/components/schemas/ExternalSystemObject"
                        }
                    }
                },
                "description": "A list of links to external systems such as CRM, Telephony System, Case Management, etc."
            },
            "ExternalSystemObject": {
                "type": "object",
                "properties": {
                    "objectType": {
                        "type": "string",
                        "description": "Object Type.",
                        "example": "Task",
                        "enum": [
                            "Conversation",
                            "Task"
                        ]
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External ID.",
                        "example": "0013601230sV7grAAC"
                    }
                },
                "description": "List of objects within the external system."
            },
            "Meeting": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gong's unique identifier for the meeting.",
                        "example": "8059707022269524529.sb5gr1tgpt5dd799eh035rb3dk@google.com_2022-06-30T13:00:00Z"
                    }
                },
                "description": "Related meetings."
            },
            "PhoneNumberReferences": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "emails": {
                        "type": "array",
                        "description": "Related email messages.",
                        "items": {
                            "$ref": "#/components/schemas/EmailMessage"
                        }
                    },
                    "calls": {
                        "type": "array",
                        "description": "Related calls.",
                        "items": {
                            "$ref": "#/components/schemas/CallReference"
                        }
                    },
                    "meetings": {
                        "type": "array",
                        "description": "Related meetings.",
                        "items": {
                            "$ref": "#/components/schemas/Meeting"
                        }
                    },
                    "customerData": {
                        "type": "array",
                        "description": "A list of links to data from external systems (such as CRM, Telephony System, Case Management, etc.) that reference the email address and that Gong stores.",
                        "items": {
                            "$ref": "#/components/schemas/CustomerData"
                        }
                    },
                    "suppliedPhoneNumber": {
                        "type": "string",
                        "description": "The supplied phone number."
                    },
                    "matchingPhoneNumbers": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Matching phone numbers found.",
                        "items": {
                            "type": "string",
                            "description": "Matching phone numbers found."
                        }
                    },
                    "emailAddresses": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Related email addresses.",
                        "items": {
                            "type": "string",
                            "description": "Related email addresses."
                        }
                    }
                }
            },
            "CustomerEngagement": {
                "type": "object",
                "properties": {
                    "eventType": {
                        "type": "string",
                        "description": "Event type",
                        "example": "ExternalCallViewing",
                        "enum": [
                            "contentShared",
                            "contentViewed",
                            "customEvent",
                            "digitalInteraction"
                        ]
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "The date and time the event occurred in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.",
                        "format": "date-time",
                        "example": 1547971200.000000000
                    },
                    "contentId": {
                        "type": "string",
                        "description": "Event content id",
                        "example": "7782342274025937895"
                    },
                    "contentUrl": {
                        "type": "string",
                        "description": "Event content url",
                        "example": "https://app.gong.io/e/c-share/tkn=5vjaxkqnzmp515b220vlzto2i"
                    },
                    "reportingSystem": {
                        "type": "string",
                        "description": "Event reporting system",
                        "example": "https://app.gong.io/e/c-share/tkn=5vjaxkqnzmp515b220vlzto2i"
                    },
                    "eventName": {
                        "type": "string",
                        "description": "Event name",
                        "example": "https://app.gong.io/e/c-share/tkn=5vjaxkqnzmp515b220vlzto2i"
                    },
                    "sourceEventId": {
                        "type": "string",
                        "description": "Source event Id ",
                        "example": "https://app.gong.io/e/c-share/tkn=5vjaxkqnzmp515b220vlzto2i"
                    }
                },
                "description": "A list of customer's engagement (such as viewing external share call)"
            },
            "EmailAddressReferences": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "emails": {
                        "type": "array",
                        "description": "Related email messages.",
                        "items": {
                            "$ref": "#/components/schemas/EmailMessage"
                        }
                    },
                    "calls": {
                        "type": "array",
                        "description": "Related calls.",
                        "items": {
                            "$ref": "#/components/schemas/CallReference"
                        }
                    },
                    "meetings": {
                        "type": "array",
                        "description": "Related meetings.",
                        "items": {
                            "$ref": "#/components/schemas/Meeting"
                        }
                    },
                    "customerData": {
                        "type": "array",
                        "description": "A list of links to data from external systems (such as CRM, Telephony System, Case Management, etc.) that reference the email address and that Gong stores.",
                        "items": {
                            "$ref": "#/components/schemas/CustomerData"
                        }
                    },
                    "customerEngagement": {
                        "type": "array",
                        "description": "A list of customer's engagement (such as viewing external share call)",
                        "items": {
                            "$ref": "#/components/schemas/CustomerEngagement"
                        }
                    }
                }
            },
            "LineErrorResponse": {
                "type": "object",
                "properties": {
                    "line": {
                        "type": "integer",
                        "description": "Line number of failed object",
                        "format": "int32",
                        "example": 49
                    },
                    "description": {
                        "type": "string",
                        "description": "Error description",
                        "example": "Mandatory field [objectId] is missing or empty"
                    }
                }
            },
            "RequestStatusResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "status": {
                        "type": "string",
                        "description": "Request status",
                        "example": "FAILED",
                        "enum": [
                            "PENDING",
                            "IN_PROGRESS",
                            "DONE",
                            "FAILED"
                        ]
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LineErrorResponse"
                        }
                    },
                    "totalErrorCount": {
                        "type": "integer",
                        "description": "Number of objects that failed parsing",
                        "format": "int32",
                        "example": 3
                    },
                    "totalSuccessCount": {
                        "type": "integer",
                        "description": "Number of valid objects",
                        "format": "int32",
                        "example": 97
                    }
                }
            },
            "GenericCrmIntegration": {
                "type": "object",
                "properties": {
                    "integrationId": {
                        "type": "integer",
                        "description": "The ID of the integration.<br><b>Note:</b> Parse the integrationId as Long or BigInt. Parsing the integrationId as an Integer truncates the integrationId to trailing zeros and returns an incorrect ID.",
                        "format": "int64",
                        "example": 5517027188234205706
                    },
                    "ownerEmail": {
                        "type": "string",
                        "description": "Email address of the person responsible for the integration",
                        "example": "joe.doe@acme.com"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the integration",
                        "example": "ACME Sandbox"
                    }
                },
                "description": "A list of integration objects"
            },
            "ListGenericCrmIntegrationsResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "integrations": {
                        "type": "array",
                        "description": "A list of integration objects",
                        "items": {
                            "$ref": "#/components/schemas/GenericCrmIntegration"
                        }
                    }
                }
            },
            "ListSelectedFieldsResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "objectTypeToSelectedFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "description": "selectedFields",
                            "items": {
                                "$ref": "#/components/schemas/GenericSchemaFieldRequest"
                            }
                        },
                        "description": "selectedFields"
                    }
                }
            },
            "GetGenericCrmObjectsResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "crmObjectsMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "description": "crmObjects"
                            },
                            "description": "crmObjects"
                        },
                        "description": "crmObjects"
                    }
                }
            },
            "CoachingMetrics": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "coachingData": {
                        "type": "array",
                        "description": "A list, in which each item specifies one managers coaching data",
                        "items": {
                            "$ref": "#/components/schemas/CoachingMetricsData"
                        }
                    }
                }
            },
            "CoachingMetricsData": {
                "type": "object",
                "properties": {
                    "manager": {
                        "$ref": "#/components/schemas/CoachingUser",
                        "exampleSetFlag": false
                    },
                    "directReportsMetrics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CoachingRepData"
                        }
                    }
                },
                "description": "A list, in which each item specifies one managers coaching data"
            },
            "CoachingRepData": {
                "type": "object",
                "properties": {
                    "report": {
                        "$ref": "#/components/schemas/CoachingUser",
                        "exampleSetFlag": false
                    },
                    "metrics": {
                        "type": "object",
                        "additionalProperties": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "CoachingUser": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the user (up to 20 digits).",
                        "example": "234599484848423"
                    },
                    "emailAddress": {
                        "type": "string",
                        "description": "The email address of the Gong user.",
                        "example": "test@test.com"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The first name of the Gong user.",
                        "example": "Jon"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The last name of the Gong user.",
                        "example": "Snow"
                    },
                    "title": {
                        "type": "string",
                        "description": "The job title of the Gong user.",
                        "example": "Enterprise Account Executive"
                    }
                }
            },
            "CallsResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "records": {
                        "$ref": "#/components/schemas/Records",
                        "exampleSetFlag": false
                    },
                    "calls": {
                        "type": "array",
                        "description": "A list, in which each item specifies one call.",
                        "items": {
                            "$ref": "#/components/schemas/CallBasicData"
                        }
                    }
                }
            },
            "SpecificCall": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "call": {
                        "$ref": "#/components/schemas/CallBasicData",
                        "exampleSetFlag": false
                    }
                }
            },
            "AssociationObject": {
                "type": "object",
                "properties": {
                    "accountCrmId": {
                        "type": "string",
                        "description": "CRM account Id.",
                        "example": "a5V1Q00A120DP4CVAW"
                    },
                    "dealCrmId": {
                        "type": "string",
                        "description": "CRM deal Id, if deal/opportunity was associated.",
                        "example": "0052Q00000qkGmgQBT"
                    }
                },
                "description": "List of all association objects."
            },
            "ManualAssociationResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "records": {
                        "$ref": "#/components/schemas/Records",
                        "exampleSetFlag": false
                    },
                    "associations": {
                        "type": "array",
                        "description": "A list, in which each item specifies one manual call association.",
                        "items": {
                            "$ref": "#/components/schemas/ManualAssociationsBasicData"
                        }
                    }
                }
            },
            "ManualAssociationsBasicData": {
                "type": "object",
                "properties": {
                    "callId": {
                        "type": "string",
                        "description": "Gong's unique numeric identifier for the call (up to 20 digits).",
                        "example": "7782342274025937895"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user Id who performed the association.",
                        "example": "234599484848423"
                    },
                    "created": {
                        "type": "string",
                        "description": "The association date.",
                        "format": "date-time",
                        "example": 1518863400.000000000
                    },
                    "associatedCrmObjects": {
                        "type": "array",
                        "description": "List of all association objects.",
                        "items": {
                            "$ref": "#/components/schemas/AssociationObject"
                        }
                    }
                },
                "description": "Basic association details such as call Id, etc."
            },
            "PermissionProfilesResponse": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string",
                        "description": "A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.",
                        "example": "4al018gzaztcr8nbukw"
                    },
                    "profiles": {
                        "type": "array",
                        "description": "A list, in which each item specifies a permission profile.",
                        "items": {
                            "$ref": "#/components/schemas/PermissionProfileDTO"
                        }
                    }
                }
            },
            "DeleteMeetingRequest": {
                "type": "object",
                "properties": {
                    "organizerEmail": {
                        "type": "string",
                        "description": "The email address of the user who created the meeting.",
                        "example": "test@test.com"
                    }
                },
                "description": "Meeting update metadata"
            },
            "CallsUsersAccessDeleteDto": {
                "type": "object",
                "properties": {
                    "callAccessList": {
                        "type": "array",
                        "description": "A list, in which each item specifies a call and a list of users to be removed from the call.",
                        "items": {
                            "$ref": "#/components/schemas/CallUsersAccessDto"
                        }
                    }
                }
            }
        }
    }
}
